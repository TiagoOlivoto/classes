---
title: "6. Amostragem"
---

```{r}
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=1590128876")
df
```

A função `sample_random()` retirada do pacote [metan](https://github.com/TiagoOlivoto/metan/blob/master/R/utils_sample.R) pode ser utilizada para amostrar `n` linhas aleatoriamente do conjunto de dados `data`. Utilizando `prop`, uma proporção dos dados é amostrada. Este último é útil ao realizar amostragens estratificadas informando o argumento `by`, onde cada estrato possui diferentes tamanhos de amostra.

```{r}
# Função auxiliar
sample_random <- function(data,
                          n,
                          prop,
                          by = NULL,
                          weight = NULL){
  if(!missing(by)){
    data <- data |> group_by({{by}})
  }
  dplyr::slice_sample(data, n = n, prop = prop, weight_by = weight) |>
    ungroup()
}
```

# Amostragem aleatória simples

A amostragem aleatória simples é o método mais básico de amostragem que tanto pode ser utilizado diretamente na seleção de uma amostra, quando se conhece os indivíduos da população, como ser parte de outros planos amostrais como, por exemplo, da Amostragem Estratificada.

O número possíveis de amostras com `n` indivíduos de uma população com `N` elementos, é dado por:

$$
\mathop C\nolimits_N^n = \frac{N!}{n!(N-n)!}
$$

No próximo exemplo, veremos as possíveis amostras (120) com 3 indivíduos, tomadas de uma população com 10 indivíduos.

```{r}
N <- 10
n <- 3
d <- combn(N, n)
t(d)
```


## Aplicação

Vamos considerar uma variável `x`, distribuida normalmente com média $\bar X = 10$ e desvio padrão $S = 2$, avaliada em população com N = 10.

```{r}
set.seed(1)
N <- 10
df2 <- data.frame(id = 1:N,
                  x = rnorm(n = N, mean = 10, sd = 2))
df2
```

Considerando uma amostragem com `n = 3`, as 120 amostras possíveis são

```{r}
n <- 3
amostras <- combn(N, n) |> t()
amostras |> head()
amostras |> tail()
```

## Médias amostrais

A seguinte função, computa a média das 120 amostras. Assim, obtém-se a distribuição das médias amostrais.

```{r}
medias <- NULL
# abordagem com for-loop
for (i in 1:nrow(amostras)) {
  individ <- amostras[i,]
  valores <- df2$x[individ]
  medias <- append(medias, mean(valores))
}

# criar um data frame com as médias
df_medias <- data.frame(amostras) |> mutate(media = medias)
head(df_medias)
tail(df_medias)
```

Ao computar a média das medias amostrais, obtém-se a média populacional

```{r}
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df2$x)

identical(med_amostral, med_pop)

ggplot(df_medias, aes(x = media)) +
  geom_histogram(bins = 8, color = "black", fill = "gray") +
  geom_vline(xintercept = med_pop, color = "red", size = 1)
```

## Tamanho da amostra vs acurácia

No seguinte exemplo, vamos investigar o impacto do tamanho da amostra na acurácia da média. Para isso, serão amostradas aleatoriamente 1:120 médias amostrais do conjunto `df_medias` e calculado o desvio em relação a média populacional. O processo é repetido `nboot` vezes utilizando a técnica bootstrap.

```{r}
#| out-width: "100%"
nboot <- 200

samples <- list()
for(j in 1:nboot){
  tmp <- 
    map_dbl(1:nrow(df_medias), function(x){
      rows <- sample(1:nrow(df_medias), x)
      mean(df_medias[rows,]$media)
    })
  samples[[j]] <- tmp
}

# cada coluna contém as médias amostrais de um procedimento bootstrap
samples <- do.call(cbind, lapply(samples, data.frame))
colnames(samples) <- paste0("v", 1:ncol(samples))

# criar dados longo
samples_long <- 
  samples |> 
  pivot_longer(everything()) |> 
  mutate(desvio  = value -  mean(df2$x),
         x = rep(1:nrow(df_medias), each = nboot))

# média dos procedimentos bootstrap
samples_mean <- 
  samples_long |> 
  group_by(x) |> 
  summarise(mu = mean(desvio))


# criar o gráfico
ggplot(samples_long, aes(x = x,
                         y = desvio,
                         group = name)) +
  geom_line(alpha = 0.1) +
  geom_line(aes(x = x, y = mu, group = 1),
            data = samples_mean,
            color = "red") +
  scale_x_continuous(breaks = seq(0, 120, by = 10)) +
  theme_bw(base_size = 16) +
  theme(panel.grid.minor = element_blank()) +
  labs(x = "Número de médias amostrais incluídas",
       y = "Desvio em relação a média populacional",
       title = "Resultado de 200 procedimentos bootstrap",
       caption = glue::glue("Média: {round(mean(df2$x), 3)}"))

```

## Exemplo da altura da turma
```{r}
df_turma <- 
  import("https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=1590128876") |> 
  metan::remove_rows_na()





#| out-width: "100%"
nboot <- 200

samples <- list()
for(j in 1:nboot){
  tmp <- 
    map_dbl(1:nrow(df_turma), function(x){
      rows <- sample(1:nrow(df_turma), x)
      mean(df_turma[rows,]$altura)
    })
  samples[[j]] <- tmp
}

# cada coluna contém as médias amostrais de um procedimento bootstrap
samples <- do.call(cbind, lapply(samples, data.frame))
colnames(samples) <- paste0("v", 1:ncol(samples))

# criar dados longo
samples_long <- 
  samples |> 
  pivot_longer(everything()) |> 
  mutate(desvio  = value -  mean(df_turma$altura),
         x = rep(1:nrow(df_turma), each = nboot))

# média dos procedimentos bootstrap
samples_mean <- 
  samples_long |> 
  group_by(x) |> 
  summarise(mu = mean(desvio))


# criar o gráfico
ggplot(samples_long, aes(x = x,
                         y = desvio,
                         group = name)) +
  geom_line(alpha = 0.1) +
  geom_line(aes(x = x, y = mu, group = 1),
            data = samples_mean,
            color = "red") +
  scale_x_continuous(breaks = seq(1, nrow(df_turma), by = 1)) +
  theme_bw(base_size = 16) +
  theme(panel.grid.minor = element_blank()) +
  labs(x = "Número de alunos incluídos na amostra",
       y = "Desvio em relação a média populacional",
       title = "Resultado de 200 procedimentos bootstrap",
       caption = glue::glue("Média: {round(mean(df_turma$altura), 3)}"))

```

## Abordagem paralela

Quando o número de amostras cresce bastante, a abordagem for-loop não é computacionalmente eficiente. Assim, uma abordagem utilizando `sapply()` é mais eficiente. Quando paraleliza-se a função, a eficiência aumenta mais ainda.

```{r eval = FALSE}
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
  individ <- amostras[id,]
  mean(df[[var]][individ])
}


N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
                  x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()


system.time(
  medias2 <-
    map_dbl(1:nrow(amostras2), function(i){
      get_mean(df2, "x", amostras2, id = i)
    })
)


library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
              varlist = c("df2", "amostras2", "get_mean"))
system.time(
  medias3 <-
    parLapply(clust, 1:nrow(amostras2), function(i){
      get_mean(df2, "x", amostras2, id = i)
    })
)
stopCluster(clust)

```

# Amostragem Aleatória Estratificada

## Número igual dentro de cada estrato

```{r}
sample_random(df, n = 3, by = crm)
```

## Proporção da população em cada estrato

```{r}
sample_random(df,
              prop = 0.3,
              by = crm)
```

# Amostragem aleatória sistemática

```{r}
sample_systematic <- function(data,
                              n,
                              r = NULL,
                              by =  NULL){
  aux <- function(data, n, r = NULL){
    k <- floor(nrow(data) / n)
    message("k = ", k)
    if(is.null(r)){
      r <- sample(1:k, 1)
    }
    if(r == 1){
      rows <- sample(1:nrow(data), n)
    } else{
      rows <- seq(r, r + k*(n-1), k)
    }
    slice(data, rows) |>
      mutate(.id = rows, .before = 1)
  }
  if(!missing(by)){
    data <- data |> group_by({{by}})
  }
  if(is.grouped_df(data)){
    groups <- group_vars(data)
    data |>
      ungroup() |>
      nest(data = -c(!!!syms(groups))) |>
      mutate(sample = map(data, ~.x |>  aux(n = n, r = r))) |>
      select(-data) |>
      unnest(sample)
  } else{
    aux(data, n = n, r = r)
  }
}
set.seed(1)
sample_systematic(df, n = 4)
```

```{=html}
<div align='center'><a href='https://www.free-website-hit-counter.com'><img src='https://www.free-website-hit-counter.com/c.php?d=9&id=138596&s=2' border='0' alt='Free Website Hit Counter'></a><br / ><small><a href='https://www.free-website-hit-counter.com' title="Free Website Hit Counter">Free website hit counter</a></small></div>
```
