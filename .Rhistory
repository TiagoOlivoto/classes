(2-1.5) / 0.2
pnorm(2.5, 1.5, 0.2)
pnorm(2.5, 1.5, 0.2) - pnorm(-2.5, 1.5, 0.2)
pnorm(-2.5, 1.5, 0.2)
pnorm(2, 1.5, 0.2) - pnorm(1, 1.5, 0.2)
# multiplica a altura pela base e soma
sum(altrect * barea)
n <- 50000
# cria uma sequência com n retangulos de x1 a x2
x <- seq(x1, x2, length.out = n)
# acha a base da área
barea <- (x2 - x1)/n
# encontra a altura
altrect <- mnorm(x, me, dp)
# multiplica a altura pela base e soma
sum(altrect * barea)
barea
x
n <- 20
# cria uma sequência com n retangulos de x1 a x2
x <- seq(x1, x2, length.out = n)
# acha a base da área
barea <- (x2 - x1)/n
# encontra a altura
altrect <- mnorm(x, me, dp)
# multiplica a altura pela base e soma
sum(altrect * barea)
x
x1 <- 1.75 # x_0
x2 <- 2    # x_1
m <- 2     # média
dp <- 0.2  # desvio padrão
# método geométrico
(aprox <- int_norm(x1, x2, m, dp))
(fun_pnorm <- p2 - p175)
p2
p175
250*3,65
250*3.65
mnorm <- function(x, m, dp){
(1/(dp * sqrt(2 * pi) )) * exp(-((x - m)^2)/(2 * dp ^ 2))
}
mnorm(1.2, 100, 10)
mnorm(80, 100, 10)
sequencia <- seq(0, 90, length.out = 100)
sequencia
base <- 90/100
base
mnorm(sequencia, 100, 10)
altura <- mnorm(sequencia, 100, 10)
altura * base
altura * base |> sum()
(altura * base) |> sum()
sequencia <- seq(0, 90, length.out = 10000)
base <- 90/100
altura <- mnorm(sequencia, 100, 10)
(altura * base) |> sum()
sequencia
altura <- mnorm(sequencia, 100, 10)
altura
base <- 90/10000
altura <- mnorm(sequencia, 100, 10)
(altura * base) |> sum()
pnorm(90, mean = 100, sd = 10)
sequencia <- seq(0, 90, length.out = 100000)
base <- 90/100000
altura <- mnorm(sequencia, 100, 10)
(altura * base) |> sum()
sequencia <- seq(-1, 0, length.out = 100000)
sequencia
sequencia <- seq(-1, 0, length.out = 10)
sequencia
sequencia <- seq(0, -1, length.out = 10)
sequencia
sequencia <- seq(0, -1, length.out = 100)
base <- -1/100
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
sequencia <- seq(-Inf, -1, length.out = 100)
sequencia <- seq(-900, -1, length.out = 100)
base <- -1/100
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
base
base <- 1/100
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
sequencia <- seq(-90000, -1, length.out = 100)
base <- 1/100
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
sequencia
sequencia <- seq(0, 1, length.out = 100)
base <- 1/100
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
sequencia <- seq(1.75, 2, length.out = 10000)
2-1.75
base <- 0.25/10000
base
sequencia
altura <- mnorm(sequencia, 2, 0.2)
(altura * base) |> sum()
pnorm(0) - pnorm(-1.25)
rond(pnorm(0) - pnorm(-1.25), 20)
round(pnorm(0) - pnorm(-1.25), 20)
sequencia <- seq(1.75, 2, length.out = 30)
base <- 0.25/30
altura <- mnorm(sequencia, 2, 0.2)
(altura * base) |> sum()
144/50
230/200
qnorm(0.95)
qnorm(0.95) *4
(qnorm(0.95) *4) + 22
sequencia <- seq(0, -1.25, length.out = 50)
base <- 1.25/500
base <- 1.25/50
altura <- mnorm(sequencia, 2, 0.2)
(altura * base) |> sum()
altura
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
pnorm(-1.25)
pnorm(0) - pnorm(-1.25)
sequencia <- seq(-99999999999999, -1.25, length.out = 50)
sequencia <- seq(-99999999999999, -1.25, length.out = 5000000)
sequencia <- seq(-99999999999999, -1.25, length.out = 5000000)
base <- 1.25/5000000
altura <- mnorm(sequencia, 0, 1)
(altura * base) |> sum()
install.packages("digitize")
library(digitize)
tmp <- tempfile()
png(tmp)
plot(rnorm(10) + 1:10, xlab="x", ylab="y")
dev.off()
mydata <- digitize(tmp)
mydata
digitize
library(rio)
library(tidyverse)
library(metan)
url <- "https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=2056145155"
df <-  import(url, dec = ",")
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
# Load data
trend_data <- read_csv("data/trend_data.csv")
library(rio)
library(tidyverse)
library(metan)
url <- "https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=2056145155"
df <-  import(url, dec = ",")
library(esquisse)
esquisser()
esquisser(df)
esquisser(df)
esquisser(iris)
esquisser(df)
esquisser()
esquisser(viewer = "pane")
esquisser(viewer = "browser")
options
?options
getOption()
getOption("ws")
getOption("esquisser.viewer")
options("esquisse.viewer" = "browser")
esquisser()
crossing(i = 1:3, j = 1:3)
expand(i = 1:3, j = 1:3)
crossing(i = 1:3, j = 1:3)
url <- "https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=2073179916"
df <-
import(url, dec = ",") |>
as_factor(1:3)
head(df)
l1 <-
ggplot(df, aes(x = MST, y = AF)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # estima uma regressão linear
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
l2 <-
ggplot(df, aes(x = MST, y = AF, colour = DAP)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
df
ggplot(df, aes(x = comprimento, y = largura)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # estima uma regressão linear
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
l2 <-
ggplot(df, aes(x = comprimento, y = largura, color = cor)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
l1 <-
ggplot(df, aes(x = comprimento, y = largura)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # estima uma regressão linear
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
l2 <-
ggplot(df, aes(x = comprimento, y = largura, color = cor)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
l2 <-
ggplot(df, aes(x = comprimento, y = largura, color = grupo)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Matéria seca total (g)",
y = "Área foliar (cm2)")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
df <-
import(url, dec = ",") |>
as_factor(1:3)
View(df)
#| out-width: "100%"
l1 <-
ggplot(df, aes(x = comprimento, y = largura)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # estima uma regressão linear
labs(x = "Comprimento do grão",
y = "Largura do grão")
l2 <-
ggplot(df, aes(x = comprimento, y = largura, color = grupo)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Comprimento do grão",
y = "Largura do grão")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
library(rio)
estacao <- import("test.csv")
set_wd_here()
estacao <- import("test.csv")
View(estacao)
estacao <- import("test.csv", dec = ",")
View(estacao)
estacao <- import("test.csv", dec = ",") |> separate(Horário, into = c("dia", "hora"), sep = "\s")
estacao <- import("test.csv", dec = ",") |> separate(Horário, into = c("dia", "hora"), sep = "\\s")
separate(dia, into = c("d", "m"), sep = "/")
estacao <-
import("test.csv", dec = ",") |>
separate(Horário, into = c("dia", "hora"), sep = "\\s") |>
separate(dia, into = c("d", "m"), sep = "/")
View(estacao)
?separate
estacao <-
import("test.csv", dec = ",") |>
separate(Horário, into = c("dia", "hora"), sep = "\\s") |>
separate(dia, into = c("d", "m"), sep = "/", remove = FALSE)
View(estacao)
estacao <-
import("test.csv", dec = ",") |>
separate(Horário, into = c("dia", "hora"), sep = "\\s") |>
separate(dia, into = c("d", "m"), sep = "/", remove = FALSE) |>
as_numeric(d, m)
View(estacao)
export(estacao, "test.xlsx")
export(estacao, "test2.csv")
url2 <- "https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=764890920"
df_estacao <-
import(url2, setclass = "tbl", dec = ",") |>
as_character(1:4) |>
mutate(dia = dmy(dia))
library(tidyverse)
library(metan)
library(rio)
library(ggridges)
library(rnaturalearth)
library(ggradar)
library(lubridate)
library(geobr)
library(esquisse)
df_estacao <-
import(url2, setclass = "tbl", dec = ",") |>
as_character(1:4) |>
mutate(dia = dmy(dia))
View(df_estacao)
df_prec <-
clima_max_min |>
pivot_wider(names_from = "name",
values_from = "value")
clima_max_min <-
df_estacao %>%
group_by(dia) %>%
summarise(max = max(tmax),
min = min(tmin),
mean = mean(tmed),
precip = sum(prec)) %>%
pivot_longer(-dia)
# realiza um subset para remover a precipitação
df_temp <-
clima_max_min |>
subset(name != "precip")
# faz o gráfico de linhas
ggplot(df_temp, aes(dia, value, color = name)) +
geom_point() +
geom_line() +
scale_color_manual(values = c("red", "green", "blue"),
labels = c("Temperatura máxima (ºC)",
"Temperatura média (ºC)",
"Temperatura mínima (ºC)"),
guide = "legend") +
scale_x_date(date_breaks = "3 week", # marcação a cada duas semanas
date_labels = "%d/%m/%y") + # formato dd/mm/aa
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Temperaturas máximas, médias e mínimas em 2022",
subtitle = "Estação - Fazenda Ressacada",
caption = "Elaboração: Prof. Olivoto",
x = "Dia do ano",
y = "Temperatura (ºC)",
color = NULL) # remove o título da legenda
df_prec <-
clima_max_min |>
pivot_wider(names_from = "name",
values_from = "value")
ggplot() +
geom_bar(df_prec,
mapping = aes(x = dia, y = precip * 30 / 100),
stat = "identity",
fill = "skyblue") +
geom_line(df_prec,
mapping = aes(x = dia, y = max, colour = "red"),
size = 1) +
geom_line(df_prec,
mapping = aes(x = dia, y = min, colour = "blue"),
size = 1) +
scale_x_date(date_breaks = "15 days", date_labels =  "%d/%m",
expand = expansion(c(0, 0)))+
scale_y_continuous(name = expression("Temperatura ("~degree~"C)"),
sec.axis = sec_axis(~ . * 100 / 30 , name = "Precipitação (mm)")) +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_color_identity(breaks = c("red", "blue"),
labels = c("Temperatura máxima (ºC)",
"Temperatura mínima (ºC)"),
guide = "legend") +
labs(x = "Dia do ano")
vento_long <-
df_estacao %>%
select(m, hora, velvent) %>%
pivot_longer(-c(m, hora))
head(vento_long)
# confeccionar gráfico
ggplot(vento_long, aes(m, value, color = name, group = name )) +
stat_summary(geom = "point",
fun = mean) +
stat_summary(geom = "line") +
stat_summary(geom = "errorbar", width = 0.1) +
scale_color_manual(values = c("red", "blue"),
labels = c("Rajada (m/s)",
"Velocidade do vento (m/s)"),
guide = "legend") +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12)) +
labs(title = "Velocidade média mensal do vento em 2022",
subtitle = "Estação UFSC - Ressacada",
caption = "Elaboração: Prof. Tiago Olivoto",
x = "Mês do ano",
y = "Velocidade (m/s)")
# cria uma tabela de frequência transformando a variável quantitativa direção do vento
# em uma qualitativa
freq <-
cut(df_estacao$dirvent, breaks = seq(0, 360, by = 45)) |>
table() |>
as.data.frame() %>%
set_names("Direção", "Dias") %>%
mutate(Direção = paste0(seq(0, 315, by = 45)),
Percent = Dias / 3428 * 100) %>%
remove_cols(Dias)
freq
# criar um radar plot para mostrar a direção predominante
# do vento
ggradar(freq %>% transpose_df(),
values.radar = c("0%",  "25.8%"),
grid.max = max(freq$Percent))
#| out-width: "100%"
#|
d1 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density()
d2 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density(color = "black",
fill = "skyblue") +
facet_wrap(~m) +
labs(x = "Temperatura média (ºC)",
y = "Horas")
d3 <-
ggplot(df_estacao, aes(x = tmed, y = m, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
# agrupa os gráficos
arrange_ggplot((d1 + d2) / d3,
tag_levels = list(c("d1", "d2", "d3")))
df_estacao
df_estacao <-
import(url2, setclass = "tbl", dec = ",") |>
as_character(1:4) |>
mutate(dia = dmy(dia),
m = fct_relevel(factor(m), paste0(1:10)))
ggplot(df_estacao, aes(x = tmed, y = m, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
d3 <-
ggplot(df_estacao, aes(x = tmed, y = rev(m), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
d3
ggplot(df_estacao, aes(x = tmed)) +
geom_density(color = "black",
fill = "skyblue") +
facet_wrap(~m) +
labs(x = "Temperatura média (ºC)",
y = "Horas")
d2 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density(color = "black",
fill = "skyblue") +
facet_wrap(~m, ncol = 5) +
labs(x = "Temperatura média (ºC)",
y = "Horas")
d2 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density(color = "black",
fill = "skyblue") +
facet_wrap(~m, ncol = 5) +
labs(x = "Temperatura média (ºC)",
y = "Horas")
d3 <-
ggplot(df_estacao, aes(x = tmed, y = m, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
# agrupa os gráficos
arrange_ggplot((d1 + d2) / d3,
tag_levels = list(c("d1", "d2", "d3")))
d3 <-
ggplot(df_estacao, aes(x = tmax, y = m, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
# agrupa os gráficos
arrange_ggplot((d1 + d2) / d3,
tag_levels = list(c("d1", "d2", "d3")))
library(DataExplorer)
plot_intro(df_estacao)
plot_str(df_estacao)
plot_bar(df_estacao)
plot_histogram(df_estacao)
plot_missing(df_estacao)
plot_intro(df_estacao)
# colunas categóricas
plot_histogram(df_estacao)
# colunas categóricas
plot_density(df_estacao)
plot_density
# colunas categóricas
plot_prcomp(df_estacao)
# colunas categóricas
plot_correlation(df_estacao)
# colunas categóricas
plot_bar(df_estacao)
plot_intro(df_estacao)
introduce(df)
introduce(df_estacao)
plot_scatterplot(df_estacao)
plot_scatterplot(df_estacao, by = "m")
plot_str(df_estacao)
