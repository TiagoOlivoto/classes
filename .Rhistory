hjust=-0.5)
p1 + p2
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_biostat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
hjust=-0.3)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = BLOCO),
fun=mean,
geom="text",
hjust=-0.3)
p1 + p2
with(df,
DBC(HIBRIDO, BLOCO, RG))
library(metan)
g <- g_simula(4, 2)
g
mat <- make_mat(g, GEN, REP)
mat <- make_mat(g, GEN, REP, V1)
mat
mod <- aov(V1 ~ GEN + REP, data = g)
tidy(mod)
broom::tidy(mod)
mat
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(1)
g <- g_simula(4, 2) |> round_cols(V1)
g
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
library(metan)
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
row_col_sum(mat)
row_col_sum(mat)
row_col_sum(mat) |> clipr::write_clip()
broom::tidy(mod)|> clipr::write_clip()
mat
library(AgroR)
with(g, DBC(GEN, REP, VI))
with(g, DBC(GEN, REP, V1))
library(metan)
means_by(g, GEN) |> clipr::write_clip()
##### N = 20
n <- 20
p <- 0.5
x <- seq(0, n, 1)
px <- dbinom(x, n, p)
x <- seq(0, n, 1)
px <- dbinom(x, n, p)
px <- dbinom(x, n, p)
df2 <- data.frame(x, px)
# Aproximação
media <- n*p # media
desvp <- sqrt(n*p*(1-p)) # desvio padrao
ggplot(df2, aes(x = x, y = px)) +
geom_bar(stat = "identity",
width = 1,
color = "black",
size = 0.01,
fill = "salmon") +
scale_y_continuous(expand = c(0.01, 0)) +
xlab("x") +
ylab("px e fx") +
stat_function(aes(x=x),
fun=dnorm,
geom = "line",
size=1,
col="green",
args = c(mean = media, sd = desvp))
# função normal, f(x)
mnorm <- function(x, m, dp){
(1/(dp * sqrt(2 * pi) )) * exp(-((x - m)^2)/(2 * dp ^ 2))
}
# integral definida em dois pontos
# (método geométrico por soma de retângulos)
int_norm <- function(x1, x2, me, dp, n = 50000){
# cria uma sequência com n retangulos de x1 a x2
x <- seq(x1, x2, length.out = n)
# acha a base da área
barea <- (x2 - x1)/n
# encontra a altura
altrect <- mnorm(x, me, dp)
# multiplica a altura pela base e soma
sum(altrect * barea)
}
x1 <- 1.75 # x_0
x2 <- 2    # x_1
m <- 2     # média
dp <- 0.2  # desvio padrão
# método geométrico
(aprox <- int_norm(x0, x1, m, dp))
# método geométrico
(aprox <- int_norm(x1, x2, m, dp))
(fun_pnorm <- p2 - p175)
# P[X<= 1.75]
(p175 <- pnorm(q = 1.75, mean = 2, sd = 0.2))
(fun_pnorm <- p2 - p175)
# P[X<= 2.0]
(p2 <- pnorm(q = 2, mean = 2, sd = 0.2))
# P[X<= 1.75]
(p175 <- pnorm(q = 1.75, mean = 2, sd = 0.2))
p2 - p175
# método geométrico
(aprox <- int_norm(x1, x2, m, dp))
(fun_pnorm <- p2 - p175)
fun_pnorm - aprox
set.seed(1) # assegura a reprodutibilidade
X <- round(rnorm(n = 300 , mean = 20, sd = 3), digits = 1)
hist(X)
(mu <- mean(X))
(sdx <- sd(X))
get_z <- function(x){
(x - mean(x)) / sd(x)
}
# obtém o valor Z de X
Z <- get_z(X)
hist(Z)
url <- "https://bit.ly/df_biostat"
df_mat <-
import(url, sheet = "maize", setclass = "tbl") |>
select(APLA:MGRA)
library(tidyverse)
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(AgroR)
library(broom)
url <- "https://bit.ly/df_biostat"
df_mat <-
import(url, sheet = "maize", setclass = "tbl") |>
select(APLA:MGRA)
# correlação de pearson (AP e A)
cor(df_mat$APLA, df_mat$AIES)
cor(df_mat$APLA, df_mat$AIES)
# Matriz gráfica de correlação
cor(df_mat)
View(df_mat)
pairs(df_mat)
View(df_mat)
df_mat
df_mat[[1, 4]]
df_mat[[1, 4]] <- 521
pairs(df_mat)
# Matriz gráfica de correlação
corr_plot(df_mat)
library(metan)
library(tidyverse)
set_wd_here()
library(rio)
df <- import("CADERNO DE CAMPO.xlsx")
View(df)
df2 <- pivot_longer(df, H1_A1:MVE_A2)
View(df2)
View(df)
ggplot(df, aes(H1_A1, MVT_A1)) +
GeomPoint
ggplot(df, aes(H1_A1, MVT_A1)) +
geom_point()
ggplot(df, aes(H1_A1, MVT_A1)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p1 <-
ggplot(df, aes(H1_A1, MVT_A1)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p2 <-
ggplot(df, aes(H2_A1, MVT_A1)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p1 + p2
p1 <-
ggplot(df, aes(H1_A2, MVT_A2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p2 <-
ggplot(df, aes(H2_A2, MVT_A2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
p1 + p2
cor(df$H1_A1, df$MVT_A1)
cor(df$H2_A1, df$MVT_A1)
cor(df)
df |> select_numeric_cols()
df |> select(H1_A1:MVE_A2)
cor(df |> select(H1_A1:MVE_A2))
cor(df |> select(H1_A1:MVE_A2)) |> round_cols()
correlacao <- corr_coef(df)
plot(correlacao)
correlacao <- corr_coef(df, H1_A1:MVE_A2)
plot(correlacao)
corr_plot(df, H1_A1:MVE_A2)
corr_plot(df, H1_A1:MVE_A2)
View(df)
df[[1, 8]]
df[[, 8]]
df[[ 8]]
df[[1,8]] <- 2427.2
corr_plot(df, H1_A1:MVE_A2)
find_outliers(df, H1_A2)
find_outliers(df, H1_A2, plots = TRUE)
find_outliers(df, MVT_A1, plots = TRUE)
df <- import("CADERNO DE CAMPO.xlsx")
corr_plot(df, H1_A1:MVE_A2)
df <- import("CADERNO DE CAMPO.xlsx")
corr_plot(df, H1_A1:MVE_A2)
#| code-fold: true
#| out-width: "100%"
df_t <- tibble(
dist = "t",
n = seq(2, 30, length.out = 200),
media = 10,
desvpad = 2,
UL = media + get_ci_t(media, desvpad, n = n),
LL = media - get_ci_t(media, desvpad, n = n)
)
library(metan)
g <- g_simula(6, 4)
g
mod <- aov(V1 ~ GEN + REP, data = g)
tidyr::tidy(mod)
tidyr::tidy(anova(mod))
tidyr::tidy(mod)
broom::tidy(mod)
broom::tidy(mod) |> clipr::write_clip()
df <- clipr::read_clip()
?clipr::read_clip
df <- clip_read(sep)
df <- clip_read(sep)
df <- clip_read()
View(df)
library(tidyverse)
df |>
pivot_longer(-DOSE)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = .)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df <- clip_read()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df <- clip_read()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
g <- g_simula(6, 4)
g
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod) |> clipr::write_clip()
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
library(AgroR)
g <- g_simula(4, 4)
g
with(g,
DBC(GEN, REP, VI))
with(g,
DBC(GEN, REP, V1))
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
library(rio)
df <- import("data.xlsx")
View(df)
View(df)
df <- import("data.xlsx", sheet = "df_messy")
View(df)
str(df)
as.numeric(df$MMG)
metan::find_text_in_num(df$MMG)
setwd("E:/Desktop/UFSC/aulas/classes")
View(df)
apply(df, 2, class)
View(df)
table(df, GEN)
table(df$GEN)
table(df$env)
table(df$Gen)
metan::inspect(df)
View(df)
library(tidyverse)
pivot_longer(everything())
pivot_longer(df, everything())
pivot_longer(df, COMPRES)
pivot_longer(df, COMPES)
pivot_longer(df, -c(env:BLOCO))
View(df)
library(metan)
tidy_colnames(df)
desc_stat(df)
summarise(df, across(where(is.numeric, mean)))
summarise(df, across(where(is.numeric), mean))
summarise(df, across(where(!is.numeric), mean))
summarise(df, across(where(is.numeric), list(m = mean, sd = sd)))
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
View(df_biostat)
mtcars
mtcars %>%
lm(hp ~wt + am, data = .)
mtcars |>
lm(hp ~wt + am, data = _)
View(df)
url
View(df)
df <- import("data.xlsx")
df <- import("data/data.xlsx")
getwd()
df <- import("RGV410046/data/data.xlsx")
df |> select(GEN, BLOCO, ALT_PLANT)
df |> select(GEN, BLOCO, ALT_PLANT) |> pivot_wider(names_from = BLOCO, values_from = ALT_PLANT)
df |> select(GEN, BLOCO, ALT_PLANT) |> pivot_wider(names_from = BLOCO, values_from = ALT_PLANT) |> clipr::write_clip()
rbind(1,2,3,4,5)
rbind(c(1,6),c(2,7),c(3,8),c(4,9),c(5,10))
library(AgroR)
library(metan)
df <- clip_read()
View(df)
with(df, DBC(ADUBACAO, BLOCO, MST))
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
View(df)
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
df
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
library(rio)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1216373680"
# função para importar os dados
df <- import(link)
url <- "https://bit.ly/df_biostat"
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
# Chunk 1
library(tidyverse)  # manipulação de dados
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
library(ggstatsplot)# Gráficos com inferência estatística
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
install.packages("geobr")
library(tidyverse)
library(metan)
library(rio)
library(ggridges)
library(rnaturalearth)
library(ggradar)
library(lubridate)
library(geobr)
# américa do sul
library(rnaturalearth)
library(tidyverse)
sam <-
ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
p1 <-
ggplot() +
geom_sf(data = sam, fill = "white") +
theme_light() +
xlim(c(-90, -35))
# plotar o brasil e destacar santa catarina
brazil <-
ne_states(country = "brazil", returnclass = "sf") |>
mutate(scat = ifelse(postal == "SC", "SC", "Outros"))
p2 <-
p1 +
geom_sf(data = brazil, aes(fill = scat))
p2
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE,
showProgress = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
read_municipality(code_muni = "SC",
simplified = FALSE)
read_municipality(code_muni = "SC",
simplified = FALSE)
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
p3 <-
p1 +
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
p3
p1
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
ggplot()
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25))
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE,
showProgress = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
p3 <-
p1 +
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
p3
