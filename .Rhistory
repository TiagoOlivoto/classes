between(nota, 4, 6.999999) ~ "exame",
TRUE ~ "aprovado"
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.999999) ~ "exame",
TRUE ~ "aprovado"
)) |>
arrange(desc(nota))
?between
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
TRUE ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
)) |>
arrange(desc(nota))
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
set.seed(10)
set.seed(10)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
set.seed(10)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
set.seed(10)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
set.seed(10)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
milho2 <-
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
split(milho2, milho2$CASO)
casos <- split(milho2, milho2$CASO)
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
sapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
set.seed(10)
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
milho2 <-
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
casos <- split(milho2, milho2$CASO)
set.seed(10)
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
milho2 <-
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
casos <- split(milho2, milho2$CASO)
set.seed(10)
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
milho2 <-
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
casos <- split(milho2, milho2$CASO)
set.seed(10)
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
set.seed(10)
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
View(casos)
View(casos[["Alto"]])
?slice_sample
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
library(tidyverse)
library(rio)
df <- import("faostat.csv")
View(df)
harvested <-
df |>
filter(Element == "Area harvested")
View(harvested)
harvested <-
df |>
filter(Element == "Area harvested") |>
pivot_wider(names_from = Year,
values_from = Value)
View(harvested)
harvested <-
df |>
filter(Element == "Area harvested") |>
pivot_wider(names_from = Year,
values_from = Value) |>
select(-c(Element, Unit))
View(harvested)
View(harvested)
View(df)
View(harvested)
harvested <-
df |>
filter(Element == "Area harvested")
View(harvested)
area <-
df |>
filter(Element == "Area harvested") |>
pivot_wider(names_from = Year,
values_from = Value) |>
select(-c(Element, Unit))
producao <-
df |>
filter(Element == "Production")
View(area)
View(producao)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit))
View(producao)
View(area)
View(area)
View(producao)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite(Year, value)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite(Year, Value)
View(producao)
unite
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite("ano_producao" Year, Value)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite("ano_producao", Year, Value)
View(producao)
View(producao)
View(area)
View(producao)
View(area)
area |> pivot_longer(-Pais)
area <-
df |>
filter(Element == "Area harvested") |>
pivot_wider(names_from = Year,
values_from = Value) |>
select(-c(Element, Unit)) |>
sample_n(104)
View(area)
View(producao)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite("ano_producao", Year, Value) |>
mutate(Pais = toupper(Pais))
View(producao)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite("ano_producao", Year, Value) |>
mutate(Pais = tolower(Pais))
View(producao)
producao <-
df |>
filter(Element == "Production") |>
select(-c(Element, Unit)) |>
unite("ano_producao", Year, Value) |>
mutate(Pais = toupper(Pais))
View(producao)
104*61
104*60
export(producao, "producao.xlsx")
export(area, "area.xlsx")
d <- import("area.xlsx")
d <- import("faostat/area.xlsx")
View(d)
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 29:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
#| code-fold: true
#| code-summary: "Clique aqui e veja como o calendário foi feito!"
#| out-width: "100%"
#| warning: false
#| message: false
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 29:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
events
calendR(2022)
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
img <- "RGV410046/figs/calendr.png"
img <- "RGV410046/figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046")
img <- "RGV410046/figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
img <- "/figs/calendr.png"
img <- "/figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046")
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 29:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 29:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 29:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
c(23, 25, 29:31)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 61)
events[c(21,  28, 32)] <- "08:20 às 11:50"
events[c(23, 25, 30:31)] <- "13:30 às 16:00"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2022-11-01",
end_date = "2022-12-31",
special.days = events,
special.col = c("lightsalmon", "lightgreen"),
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
# meu computador (mudar de acordo)
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
View(maize)
# seleciona variáveis numéricas
df |> select(where(is.numeric))
df |> select(!where(is.numeric))
x11()
plot(maize$MGRA, maize$MGRA)
plot(maize$MGRA, maize$NGRA)
locator(n = 1)
locator(n = 1, type = "p")
locator(n = 1, type = "p", col = "red")
x11()
locator(n = 1, type = "p", col = "red")
plot(maize$MGRA, maize$NGRA)
locator(n = 1, type = "p", col = "red")
