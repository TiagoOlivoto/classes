special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
events
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
ggsave("test.png")
ggsave("test.png", width = 5, height = 4)
ggsave("test.png", width = 4, height = 5)
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
# title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "RGV410046 - Introdução à linguagem R de programação\nCronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
ggsave("test.png", width = 4, height = 5)
open_wd()
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "",
subtitle = "RGV410046\nIntrodução à linguagem R de programação\nCronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
ggsave("test.png", width = 4, height = 5)
#| code-fold: true
#| code-summary: "Clique aqui e veja como o calendário foi feito!"
#| out-width: "100%"
#| warning: false
#| message: false
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046")
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
DOSEN <- c(0, 50, 100, 150, 200, 250)
RG    <- c(7.1, 7.3, 7.66, 7.71, 7.62, 7.6)
df2 <- data.frame(DOSEN = DOSEN, RG = RG)
# modelo de regressão
mod2 <- lm(RG ~ poly(DOSEN, 2, raw = TRUE), data = df2)
summary(mod2)
coefs(mod2)
coef(mod2)
-2.071429e-05
format(-2.071429e-05, scientific = FALSE)
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)")
library(tidyverse)
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)")
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
ggthemes::theme_igray()
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw()
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank())
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation()
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation(formula = y ~ poly(x, degree = 2))
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation(formula = y ~ poly(x, degree = 2, raw = TRUE))
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation(formula = y ~ poly(x, degree = 2, raw = FALSE))
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation(formula = y ~ poly(x, degree = 2, raw = TRUE))
format(coef(mod2), scientific = FALSE)
coef(mod2)
coef(mod2)[1]
coef(mod2)[[1]]
# parâmetros da regressão
b0 <- coef(mod2)[[1]]
b1 <- coef(mod2)[[2]]
b2 <- coef(mod2)[[3]]
# máxima eficência técnica
met <- -b1 / (2 * b2)
ypredmet <- b0 + b1 * met + b2 * met^2
# máxima eficiência econômica
milho <- 920
nit <- 17
mee <- met + (nit / (2 * b2 * milho))
mee
b0
b1
b2
met
(nit / (2 * b2 * milho))
# máxima eficiência econômica
milho <- 920
nit <- 6
mee <- met + (nit / (2 * b2 * milho))
mee
# máxima eficiência econômica
milho <- 1260
nit <- 6
mee <- met + (nit / (2 * b2 * milho))
mee
# Derivada da função de segundo grau
D(expression(a + b*x  + c * x ^ 2), "x")
d_quad <- function(x, b0, b1, b2){
b1 + b2 * (2 * x)
}
ggplot() +
stat_function(fun = d_quad,
n = 500,
linewidth = 1,
xlim = c(0, 100),
args = c(b0 = b0,
b1 = b1,
b2 = b2)) +
geom_point(aes(x = met, y = 0),
color = "red", size = 3) +
geom_point(aes(x = mee, y = d_quad(mee, b0, b1, b2)),
color = "blue", size = 3) +
ggthemes::theme_igray()
d_quad(mee, b0, b1, b2)
nit / milho
# máxima eficiência econômica
milho <- 1069
nit <- 4
mee <- met + (nit / (2 * b2 * milho))
ypredmee <- b0 + b1 * mee + b2 * mee^2
# Derivada da função de segundo grau
D(expression(a + b*x  + c * x ^ 2), "x")
d_quad <- function(x, b0, b1, b2){
b1 + b2 * (2 * x)
}
ggplot() +
stat_function(fun = d_quad,
n = 500,
linewidth = 1,
xlim = c(0, 100),
args = c(b0 = b0,
b1 = b1,
b2 = b2)) +
geom_point(aes(x = met, y = 0),
color = "red", size = 3) +
geom_point(aes(x = mee, y = d_quad(mee, b0, b1, b2)),
color = "blue", size = 3) +
ggthemes::theme_igray()
anov[[2]] +
geom_segment(aes(x = mee,
y = ypredmee,
xend = mee,
yend = 8)) +
geom_segment(aes(x = 0,
y = ypredmee,
xend = mee,
yend = ypredmee)) +
geom_segment(aes(x = met,
y = ypredmet,
xend = met,
yend = 8),
linetype = 2) +
geom_segment(aes(x = 0,
y = ypredmet,
xend = met,
yend = ypredmet),
linetype = 2) +
labs(x = "Doses de Nitrogênio",
y = "Rendimento de grãos (t/ha)")
# gráfico base
# p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)") +
geom_segment(aes(x = mee,
y = ypredmee,
xend = mee,
yend = 8)) +
geom_segment(aes(x = 0,
y = ypredmee,
xend = mee,
yend = ypredmee)) +
geom_segment(aes(x = met,
y = ypredmet,
xend = met,
yend = 8),
linetype = 2) +
geom_segment(aes(x = 0,
y = ypredmet,
xend = met,
yend = ypredmet),
linetype = 2) +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
ggpubr::stat_regline_equation(formula = y ~ poly(x, degree = 2, raw = TRUE))
# máxima eficiência econômica
milho <- 1069
nit <- 16
d_quad(mee, b0, b1, b2)
(nit / (2 * b2 * milho))
# máxima eficiência econômica
milho <- 1069
nit <- 4
nit
16.66 * 60
1069/16.666
64*16.6666
1066/ 16.666
1066/ 16.66
64* 16.66
64* 16.6666
1066 / 16.666
64 * 16.666
# máxima eficiência econômica
milho <- 1066.62
nit <- 4
milho
# máxima eficiência econômica
milho <- 1066.62
nit <- 4
mee <- met + (nit / (2 * b2 * milho))
# máxima eficência técnica
met <- -b1 / (2 * b2)
ypredmet <- b0 + b1 * met + b2 * met^2
met
ypredmet
# máxima eficência técnica
met <- -b1 / (2 * b2)
ypredmet <- b0 + b1 * met + b2 * met^2
# máxima eficiência econômica
milho <- 1066.62
nit <- 4
mee <- met + (nit / (2 * b2 * milho))
ypredmee <- b0 + b1 * mee + b2 * mee^2
mee
met
mee
ypredmee
met
met
mee
ypredmee
b0
b1
b2
round(b2, 5)
signif(b2, 5)
#| code-fold: true
#| code-summary: "Clique aqui e veja como o calendário foi feito!"
#| out-width: "100%"
#| warning: false
#| message: false
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046")
#| code-fold: true
#| code-summary: "Clique aqui e veja como o calendário foi feito!"
#| out-width: "100%"
#| warning: false
#| message: false
library(calendR)
# tutorial calendR
# https://r-coder.com/calendar-plot-r/
events <- rep(NA, 30)
events[c(11, 13:15, 20:22, 28)] <- "08:20 às 11:50"
img <- "figs/calendr.png"
# Creating the calendar
calendR(year = 2022,
start_date ="2023-09-01",
end_date = "2023-09-30",
special.days = events,
special.col =  "lightgreen",
title = "RGV410046 - Introdução à linguagem R de programação",
subtitle = "Cronograma de aulas",
mbg.col = "forestgreen",
months.col = "white",
bg.img = img,
legend.pos = "bottom")
#| echo: false
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R")
# Chunk 1
#| code-fold: false
library(tidyverse)  # manipulação de dados
library(metan)      # estatísticas descritivas/gráficos
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
#| echo: false
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R")
#| echo: false
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R")
