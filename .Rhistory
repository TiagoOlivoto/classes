#| fig.width=6
df1 <- 4
df2 <- 15
fcal <- 2.2543
ftab <- 3.055
ggplot() +
scale_x_continuous(limits = c(0,  6),
breaks = c(0,  fcal, ftab,  6)) +
stat_function(fun = df,
geom = "area",
fill = "red",
xlim = c(fcal, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "area",
fill = "forestgreen",
xlim = c(ftab, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "line",
size = 1,
args = list(
df1 = df1,
df2 = 63
)) +
theme_bw(base_size = 16) +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))+
labs(x = "Valor de F",
y = "Probabilidade acumulada",
title = "Distribuição F (DF1: 4, DF2: 15)")
df1 <- 4
df2 <- 15
fcal <- 2.2543
ftab <- 3.055
ggplot() +
scale_x_continuous(limits = c(0,  6),
breaks = c(0,  fcal, ftab,  6)) +
stat_function(fun = df,
geom = "area",
fill = "red",
xlim = c(fcal, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "area",
fill = "forestgreen",
xlim = c(ftab, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "line",
size = 1,
args = list(
df1 = df1,
df2 = 63
)) +
theme_bw(base_size = 16) +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))+
labs(x = "Valor de F",
y = "Probabilidade acumulada",
title = "Distribuição F (DF1: 4, DF2: 15)")
#| code-fold: true
#| code-summary: "Mostrar código"
#| fig.height=3
#| fig.width=6
df1 <- 4
df2 <- 15
fcal <- 2.2543
ftab <- 3.055
ggplot() +
scale_x_continuous(limits = c(0,  6),
breaks = c(0,  fcal, ftab,  6)) +
stat_function(fun = df,
geom = "area",
fill = "red",
xlim = c(fcal, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "area",
fill = "forestgreen",
xlim = c(ftab, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "line",
size = 1,
args = list(
df1 = df1,
df2 = 63
)) +
theme_bw(base_size = 16) +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))+
labs(x = "Valor de F",
y = "Probabilidade acumulada",
title = "Distribuição F (DF1: 4, DF2: 15)")
qf(0.05, 4, 15, lower.tail = FALSE)
url <- "http://bit.ly/df_bioestat"
df_biostat <- import(url, sheet = "DIC-DBC")
url <- "https://bit.ly/df_biostat"
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
# Chunk 1
library(tidyverse)  # manipulação de dados
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
# Chunk 2
trats <- c("50", "70", "100")
sketch(trats, r = 4, pos = "line")
# Chunk 3
url <- "https://bit.ly/df_biostat"
df_dic <- import(url, sheet = "DIC-DBC", setclass = "tbl")
df_dic <- as_factor(df_dic, 1:2)
# Chunk 4
inspect(df_dic, plot = TRUE)
# Chunk 5
desc_stat(df_dic)
anova <- aov(MST ~ RAD, data = df_dic)
summary(anova)
df_dic
url <- "https://bit.ly/df_biostat"
df_dic <- import(url, sheet = "DIC-DBC", setclass = "tbl")
df_dic <- as_factor(df_dic, 1:2)
# Chunk 1
library(tidyverse)  # manipulação de dados
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
# Chunk 2
trats <- c("50", "70", "100")
sketch(trats, r = 4, pos = "line")
url <- "https://bit.ly/df_biostat"
df_dic <- import(url, sheet = "DIC-DBC", setclass = "tbl")
df_dic <- as_factor(df_dic, 1:2)
df_dic
anova <- aov(MST ~ RAD, data = df_dic)
summary(anova)
medias <- emmeans(anova, ~ RAD)
pwpm(medias)
# mostra apenas 'significativo' (valor P < 0,05)
pwpp(medias)
plot(medias,
CIs = FALSE, # remove os intervalos de confiança das médias
comparisons = TRUE) # insere setas para comparação de médias (Tukey)
with(df_dic,
DIC(RAD, MST))
trats <- C("C1", "C2", "C3", "C4")
trats <- c("C1", "C2", "C3", "C4")
sketch(trats, r = 4, pos = "line")
sketch(trats, r = 4)
set.seed(1)
set.seed(1)
trats <- c("C1", "C2", "C3", "C4")
sketch(trats, r = 4)
set.seed(1)
trats <- c("C1", "C2", "C3", "C4")
sketch(trats, r = 4, pos = "line")
# casualização em DBC
sketch(trats, r = 4, design = "DBC", pos = "line")
# casualização em DBC
sketch(trats, r = 4, design = "DBC")
# inverte a posição dos blocos
sketch(trats, r = 4, design = "DBC", pos = "column")
#| code-fold: true
#| code-summary: "Veja o código que gerou este gráfico"
#| fig.height=3
#| fig.width=6
df1 <- 4
df2 <- 15
fcal <- 2.2543
ftab <- 3.055
ggplot() +
scale_x_continuous(limits = c(0,  6),
breaks = c(0,  fcal, ftab,  6)) +
stat_function(fun = df,
geom = "area",
fill = "red",
xlim = c(fcal, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "area",
fill = "forestgreen",
xlim = c(ftab, 6),
args = list(
df1 = df1,
df2 = 63
)) +
stat_function(fun = df,
geom = "line",
size = 1,
args = list(
df1 = df1,
df2 = 63
)) +
theme_bw(base_size = 16) +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))+
labs(x = "Valor de F",
y = "Probabilidade acumulada",
title = "Distribuição F (DF1: 4, DF2: 15)")
mod_dic <- with(df, DIC(HIBRIDO, RG))
# Chunk 1
set.seed(1)
trats <- c("C1", "C2", "C3", "C4")
sketch(trats, r = 4)
# Chunk 2
set.seed(1)
trats <- c("C1", "C2", "C3", "C4")
# casualização em DBC
sketch(trats, r = 4, design = "DBC")
# inverte a posição dos blocos
sketch(trats, r = 4, design = "DBC", pos = "column")
# Chunk 3
#| code-fold: true
#| code-summary: "Mostrar código"
#| fig.height=3
#| fig.width=6
df1 <- 4
df2 <- 20
(ftab <- qf(0.05, df1, df2, lower.tail = FALSE))
ggplot() +
scale_x_continuous(limits = c(0,  6),
breaks = c(0,  2, ftab, 4, 6)) +
stat_function(fun = df,
geom = "area",
fill = "forestgreen",
xlim = c(ftab, 6),
args = list(
df1 = df1,
df2 = df2
)) +
stat_function(fun = df,
geom = "line",
size = 1,
args = list(
df1 = df1,
df2 = df2
)) +
theme_bw(base_size = 16) +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))+
labs(x = "Valor de F",
y = "Probabilidade acumulada",
title = "Distribuição F (DF1: 4, DF2: 20)")
# Chunk 4
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_bioestat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p1 + p2
mod_dic <- with(df, DIC(HIBRIDO, RG))
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_bioestat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p1 + p2
url <- "http://bit.ly/df_bioestat"
url <- "http://bit.ly/df_biostat"
df <- import(url, sheet = "QUALI")
str(df)
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_biostat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p1 + p2
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_biostat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23)
p1 + p2
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label=round(after_stat(y), 2),
y = stage(HIBRIDO, after_stat = 0)),
fun=mean, geom="text",
size=8, col = "white", vjust=-0.5,
position = position_dodge(0.9))
p1
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label=round(after_stat(y), 2),
x = stage(HIBRIDO, after_stat = 0)),
fun=mean, geom="text",
size=8, col = "white", vjust=-0.5,
position = position_dodge(0.9))
p1
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label=round(after_stat(y), 2),
x = HIBRIDO),
fun=mean, geom="text",
size=8, col = "white", vjust=-0.5,
position = position_dodge(0.9))
p1
# p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text")
# p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
vjust=-0.5)
# p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
hjust=-0.5)
after_stat(y)
after_stat
# p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=median,
geom="text",
hjust=-0.5)
# p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
hjust=-0.5)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
hjust=-0.5)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = BLOCO),
fun=mean,
geom="text",
hjust=-0.5)
p1 + p2
library(tidyverse)
library(metan)
library(rio)
library(AgroR)
url <- "http://bit.ly/df_biostat"
df <- import(url, sheet = "QUALI")
str(df)
p1 <-
ggplot(df, aes(HIBRIDO, RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = HIBRIDO),
fun=mean,
geom="text",
hjust=-0.3)
p2 <-
ggplot(df, aes(factor(BLOCO), RG))+
geom_hline(yintercept = mean(df$RG), linetype = "dashed")+
geom_boxplot()+
stat_summary(geom = "point", fun = mean, shape = 23) +
stat_summary(aes(label = round(after_stat(y), 2),
x = BLOCO),
fun=mean,
geom="text",
hjust=-0.3)
p1 + p2
with(df,
DBC(HIBRIDO, BLOCO, RG))
library(metan)
g <- g_simula(4, 2)
g
mat <- make_mat(g, GEN, REP)
mat <- make_mat(g, GEN, REP, V1)
mat
mod <- aov(V1 ~ GEN + REP, data = g)
tidy(mod)
broom::tidy(mod)
mat
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(1)
g <- g_simula(4, 2) |> round_cols(V1)
g
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 2) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
g <- g_simula(4, 3) |> round_cols(V1, digits = 1)
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
mat <- make_mat(g, GEN, REP, V1)
mat |> clipr::write_clip()
