View(temps)
temps <-
df_temps |>
rowwise() |>
mutate(gd_arnold = gd_arnold(tmax, tmin, 10),
gd_ometto = gd_ometto(28, 10, tmax, tmin))
View(temps)
View(temps)
temps <-
df_temps |>
rowwise() |>
mutate(gd_arnold = gd_arnold(tmax, tmin, 10),
gd_ometto = gd_ometto(28, 10, tmax, tmin)) |>
ungroup() |>
mutate(gd_arnold_ac = cumsum(gd_arnold),
gd_ometto_ac = cumsum(gd_ometto))
View(temps)
temps <-
df_temps |>
rowwise() |>
mutate(gd_arnold = gd_arnold(tmax, tmin, 10),
gd_ometto = gd_ometto(32, 10, tmax, tmin)) |>
ungroup() |>
mutate(gd_arnold_ac = cumsum(gd_arnold),
gd_ometto_ac = cumsum(gd_ometto))
View(temps)
cumsum(1:10)
cumsum(1:100)
View(maize)
maize |> rename_with(contains("M"), add_suffix, suffix = "tes")
?rename_with
maize |> rename_with(.cols = contains("M"), add_suffix, suffix = "tes")
add_suffix
maize |> add_suffix(contains("E"), suffix = "TEM_E")
maize |> add_suffix(contains("E"), suffix = "tem_e")
maize
?left_join
band_members
band_members
band_instruments2
band_members |>  left_join(band_instruments2)
band_members
band_members |>  left_join(band_instruments2)
band_instruments2
band_members %>%
full_join(band_instruments2, by = c("name" = "artist"), keep = TRUE)
band_members %>%
left_join(band_instruments2, by = c("name" = "artist"), keep = TRUE)
band_members %>%
left_join(band_instruments2, by = c("name" = "artist"))
band_members %>%
left_join(band_instruments2, by = c("name" = "artist"), keep = TRUE)
band_members %>%
left_join(band_instruments2, by = c("name" = "artist"))
band_members
band_instruments2
band_instruments
band_members
band_members %>%
left_join(band_instruments)
band_members
band_instruments
band_members |> left_join(band_instruments)
band_members |> full_join(band_instruments)
# meu computador (mudar de acordo)
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=1496851198")
df <- import("https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=1496851198")
View(df)
df <- import("https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=1496851198",
dec = ",")
View(df)
df <- import("https://github.com/TiagoOlivoto/classes/raw/master/RGV410046/data/faostat/area.xlsx")
View(df)
df <- import("https://raw.githubusercontent.com/TiagoOlivoto/classes/master/RGV410046/data/estacao_fazenda.csv")
View(df)
# meu computador (mudar de acordo)
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
# meu computador (mudar de acordo)
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
# dados
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
# dados
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
View(maize)
# padrão: nova variável inserida na última posição
maize %>% mutate(CD = CESP/DIES)
# padrão: nova variável inserida na última posição
maize |> mutate(CD = CESP/DIES)
# padrão: nova variável inserida na última posição
maize |> mutate(CD = CESP/DIES)
library(rio)
library(tidyverse)
library(metan)
# dados
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
# padrão: nova variável inserida na última posição
maize |> mutate(CD = CESP/DIES)
# padrão: nova variável inserida na última posição
maize |> mutate(CESP/DIES)
# padrão: nova variável inserida na última posição
maize |> mutate(CD = CESP/DIES)
# padrão: nova variável inserida na última posição
maize |> mutate(CD = CESP*10)
# padrão: nova variável inserida na última posição
maize |> mutate(texto = paste("o CESP é", CESP))
# posição da nova variável
maize |> mutate(CD = CESP/DIES,
.after = DIES)
# mantém somente as utilizadas no cálculo
maize |> mutate(CD = CESP/DIES,
.keep = "used")
# mantém somente as utilizadas no cálculo
maize |> mutate(CD = CESP/DIES,
.keep = "SDFSDF")
# mantém somente as utilizadas no cálculo
maize |> mutate(CD = CESP/DIES,
keep = "SDFSDF")
# mantém somente as utilizadas no cálculo
maize |> mutate(CD = CESP/DIES,
.keep = "used")
# mantém as não utilizadas
maize |> mutate(CD = CESP/DIES,
.keep = "unused")
# mantém as não utilizadas
maize |> mutate(CD = CESP/DIES,
.keep = "unused")
# mantém as não utilizadas
maize |> mutate(CD = CESP/DIES,
.keep = "unused")
# mantém somente a variável criada
maize |> mutate(CD = CESP/DIES,
.keep = "none")
transmute(maize, CD = CESP/DIES)
# mantém somente as utilizadas no cálculo
maize |> mutate(CD = CESP/DIES,
CD_quad = CD ^2,
.keep = "used")
data.frame(x = 1:10)
data.frame(x = 1:10, xquad = x^2)
tibble(x = 1:10, xquad = x^2)
maize
maize |>
as.data.frame()
# mantém somente as utilizadas no cálculo
maize |>
as.data.frame() |>
mutate(CD = CESP/DIES,
CD_quad = CD ^2,
.keep = "used")
# mantém somente as utilizadas no cálculo
maize |>
mutate(CD = CESP/DIES,
CD_quad = CD ^2,
.keep = "used")
# padrão: nova variável inserida na última posição
maize |>
mutate(CD = CESP/DIES)
# padrão: nova variável inserida na última posição
maize |>
mutate(CD = CESP/DIES)
View(maize)
hib <-
maize |>
group_by(HIB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
4*3*5
hib <-
maize |>
# group_by(HIB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
hib <-
maize |>
group_by(HIB) |>
mutate(rank = rank(desc(MGRA)))
hib <-
maize |>
group_by(HIB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
hib <-
maize |>
group_by(HIB) |>
mutate(rank = rank(desc(MGRA))) |>
arrange(rank)
View(hib)
View(maize)
hib <-
maize |>
group_by(HIB, AMB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
hib <-
maize |>
group_by(HIB, AMB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
hib2 <-
maize |>
# group_by(HIB, AMB) |>
arrange(desc(MGRA))
View(hib2)
hib <-
maize |>
# group_by(HIB, AMB) |>
mutate(rank = rank(desc(MGRA)))
View(hib)
hib2 <-
maize |>
group_by(HIB, AMB) |>
arrange(desc(MGRA))
View(hib2)
maize |>
group_by(HIB) |>
slice_max(MGRA, n = 2)
sort(c("H1", "H2", "H10"))
sort(c("H10", "H02", "H01"))
df <- tibble(x = 1:2, y = 3:4, z = 5:6)
df
df |> mutate(m = sum(c(x, y, z)))
# com rowise()
df |>
rowwise() |>
mutate(soma = sum(c(x, y, z)))
df |>
mutate(id = 1:2)
df |>
mutate(id = 1:2) |>
group_by(id) |>
mutate(m = sum(c(x, y, z)))
# mesmo resultado
# utilizando semântica tidyselect
df |>
rowwise() |>
mutate(soma = sum(c_across(1:3)))
?across
View(maize)
# padrão: nova variável inserida na última posição
maize |>
mutate(CESP = CESP/DIES)
range(maize$CESP)
range(maize$CESP, na.rm = TRUE)
# função para rescalar
# intervalo de 0 a 1
rescale <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
range(maize$MGRA)
rescale(maize$MGRA)
rescale(maize$MGRA) |> range()
maize |> mutate(MGRA_resc = rescale(MGRA)))
maize |> mutate(MGRA_resc = rescale(MGRA))
maize |> select(where(is.numeric))
maize |> select(!where(is.numeric))
# aplica a função rescale() a todas as colunas numéricas
maize |> mutate(across(.cols = where(is.numeric), rescale))
# aplica a função rescale() para algumas colunas
maize |> mutate(across(4:6, rescale))
# aplica a função rescale() para algumas colunas
maize |> mutate(across("_PLANT", rescale))
# aplica a função rescale() para algumas colunas
maize |> mutate(across(contains("_PLANT"), rescale))
# aplica a função rescale() para algumas colunas
maize |> mutate(across(c(MGRA, NGRA), rescale))
# aplica a função rescale() para algumas colunas
maize |> mutate(across(MGRA:NGRA, rescale))
?across
# usando select helpers
# divide o valor da variável pela metade
# atribui um sufixo para as novas variáveis
# seleciona apenas as utilizadas
maize |>
mutate(across(contains("_PLANT"), ~.x / 2,
.names = "{.col}_metade"),
.after = AIES_PLANT,
.keep = "used")
notas <-
data.frame(aluno = paste0("Aluno", 1:10),
nota = runif(10, 3, 10) |> round(1))
notas
x <- 4
if(x > 5){
cat("x maior que 5")
}else{
cat("x < 5")
}
ifelse(x > 5; "x maior que 5", "x menor que 5")
ifelse(x > 5, "x maior que 5", "x menor que 5")
x <- 10
ifelse(x > 5, "x maior que 5", "x menor que 5")
ifelse(x > 5, yes = "x maior que 5", no = "x menor que 5")
x
x > 5
x > 5 & x< 20
x > 5 & x< 9
classe <-
transform(notas,
condicao = ifelse(nota < 4,
yes = "reprovado",
no = ifelse(nota >= 4 & nota < 7,
yes = "exame",
no = "aprovado")))
View(classe)
set.seed(5)
notas <-
data.frame(aluno = paste0("Aluno", 1:10),
nota = runif(10, 3, 10) |> round(1))
notas
classe <-
transform(notas,
condicao = ifelse(nota < 4,
yes = "reprovado",
no = ifelse(nota >= 4 & nota < 7,
yes = "exame",
no = "aprovado")))
View(classe)
set.seed(5)
notas <-
data.frame(aluno = paste0("Aluno", 1:10),
nota = runif(10, 3, 10) |> round(1))
classe <-
transform(notas,
condicao = ifelse(nota < 4,
yes = "reprovado",
no = ifelse(nota >= 4 & nota < 7,
yes = "exame",
no = "aprovado")))
View(classe)
View(classe)
order(classe$nota, decreasing = TRUE)
View(classe)
classe[order(classe$nota, decreasing = TRUE), ]
order(classe$nota, decreasing = TRUE)
classe[order(classe$nota, decreasing = TRUE), ]
between(5, 4, 6.99999999)
between(3, 4, 6.99999999)
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame"))
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
nota >= 7 ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
nota >= 7 ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
TRUE ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
nota > 7 ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
nota >= 7 ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
nota >= 7 ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
))
notas |>
mutate(condicao = case_when(
nota < 4 ~ "reprovado",
between(nota, 4, 6.99999999) ~ "exame", # mesmo que nota >= 4 & nota < 7
TRUE ~ "aprovado" # TRUE: o que não foi incluso nas duas avaliações anteriores
)) |>
arrange(desc(nota))
View(maize)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
maize |>
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
range(maize$APLA_PLANT)
range(maize$APLA_PLANT, na.rm = TRUE)
inspect(maize)
t <-
maize |>
mutate(test = case_when(MGRA > 280 ~ MGRA *10000))
View(t)
t <-
maize |>
mutate(test = case_when(MGRA > 280 ~ MGRA *10000,
TRUE ~ MGRA))
View(t)
t <-
maize |>
mutate(test = case_when(MGRA > 280 ~ MGRA *1000,
TRUE ~ MGRA))
View(t)
milho2 <-
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
View(milho2)
# cria uma lista onde cada elemento é um nível de CASO
casos <- split(milho2, milho2$CASO)
View(casos)
View(casos[["Alto"]])
View(casos[["Selecionar"]])
View(casos)
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
do.call(rbind,
lapply(casos, function(x){
x[sample(nrow(x), 1), ]
})
)
toupper("teste")
toupper("Teste")
tolower("TESTE")
