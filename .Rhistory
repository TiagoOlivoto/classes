ggplot(reg_ex, aes(DOSE, RG)) +
geom_abline(intercept = b0,
slope = b1,
color = "red") +
geom_smooth(se = FALSE, method = "lm") +
geom_point(size = 4, color = "blue") +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~~")),
coef.digits = 5) +
labs(x = expression(Doses~de~dejeto~(m^3~ha^{-1})),
y = expression(Rendimento~de~grãos~(t~ha^{-1})),
title = expression(Compreendendo~o~intercept~(beta[0]))) +
scale_x_continuous(limits = c(0, 50),
expand = expansion(c(0, 0.05))) +
scale_y_continuous(limits = c(6, 9),
breaks = c(6, 6.155, 7, 8, 9)) +
theme(panel.grid.minor = element_blank())
p1 + p2
library(tidyverse)
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(AgroR)
library(broom)
DOSEN <- c(0, 50, 100, 150, 200, 250)
RG    <- c(7.1, 7.3, 7.66, 7.71, 7.62, 7.6)
df2 <- data.frame(DOSEN = DOSEN, RG = RG)
# modelo de regressão
mod2 <- lm(RG ~ poly(DOSEN, 2, raw = TRUE), data = df2)
summary(mod2)
# valores preditos
pred2 <-
df2 %>%
mutate(predito = predict(mod2),
residual = RG - predito)
pred2
# gráfico base
p1 <-
ggplot(df2, aes(DOSEN, RG)) +
geom_point(size = 4, color = "red") +
geom_smooth(se = FALSE,
method = "lm",
formula = y ~ poly(x, 2)) +
scale_x_continuous(breaks = DOSEN) +
labs(x = "Dose de N (Kg/ha)",
y = "Rendimento de grãos (t/ha)")
p1
# máxima eficiência técnica
# mod é o modelo quadrático ajustado
met <- function(mod){
b1 <- coef(mod)[[2]]
b2 <- coef(mod)[[3]]
res <- -b1 / (2 * b2)
return(res)
}
x_met <- met(mod2)
x_met
mee <- function(mod, px, py){
x_met <- met(mod)
mee <- x_met + px / (2 * coef(mod)[[3]] * py)
return(mee)
}
x_mee <- mee(mod2, 3, 1300)
x_mee
p1 +
labs(title = "Equação quadrática",
subtitle = "Trigângulo e cículo representam os pontos de MME e MET, respectivamente",
caption = "MME = Máxima eficiência econômica\n MET = máxima eficiência técnica") +
# Linhas e ponto da MET
geom_segment(aes(x = x_met, y = pred_met, xend = x_met, yend = 6.7)) +
geom_segment(aes(x = 0, y = pred_met, xend = x_met, yend = pred_met)) +
geom_point(aes(x = x_met, y = pred_met), shape = 19, size = 3, color = "blue") +
# Linhas e ponto da MEE
geom_segment(aes(x = x_mee, y = rg_mee, xend = x_mee, yend = 6.7), linetype = 2) +
geom_segment(aes(x = 0, y = rg_mee, xend = x_mee, yend = rg_mee), linetype = 2) +
geom_point(aes(x = x_mee, y = rg_mee), shape = 17, size = 3, color = "blue") +
# Equação no gráfico
geom_text(aes(0, 7.9,
label=(
paste(
expression("y = 7.075 + 0.007184x - 2,071e"^{-5}*"x"^2*"  R" ^2*" = 0,938 "))
)
),
hjust = 0,
size = 5,
col = "black",
parse = TRUE)
y <- c(2.2, 2.6, 2.92)
median(y)
y <- c(7.09, 7.37, 8.28, 8.32)
median(y)
mean(y)
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1461701268")
df
N <- 10
n <- 3
d <- combn(N, n)
t(d)
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
individ <- amostras[id,]
mean(df[[var]][individ])
}
N <- 30
n <- 7
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
N <- 30
n <- 4
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
amostras2
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
sample_random(df, n = 3, strata = cromossomo)
# Função auxiliar
sample_random <- function(data, n, prop, strata = NULL){
if(!missing(strata)){
data <- data |> group_by({{strata}})
}
slice_sample(data, n = n, prop = prop)
}
sample_random(df, n = 3, strata = cromossomo)
sample_random(df, n = 3, strata = cromossomo)
sample_random(df,
prop = 0.3,
strata = cromossomo)
sample_sist <- function(data, n, r = NULL){
k <- ceiling(nrow(df) / 4)
if(is.null(r)){
r <- sample(1:k, 1)
}
rows <- seq(r, r + k*(n-1), k)
slice(data, rows)
}
sample_sist(df, n = 4, r = 1)
sample_sist(df, n = 4, r = 1)
# Chunk 1
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1461701268")
df
# Chunk 2
# Função auxiliar
sample_random <- function(data, n, prop, strata = NULL){
if(!missing(strata)){
data <- data |> group_by({{strata}})
}
slice_sample(data, n = n, prop = prop)
}
# Chunk 3
N <- 10
n <- 3
d <- combn(N, n)
t(d)
# Chunk 4
N <- 10
df <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
df
# Chunk 5
n <- 3
amostras <- combn(N, n) |> t()
amostras |> head()
amostras |> tail()
# Chunk 6
library(tidyverse)
medias <- NULL
# abordagem com for-loop
for (i in 1:nrow(amostras)) {
individ <- amostras[i,]
valores <- df$x[individ]
medias <- append(medias, mean(valores))
}
# criar um data frame com as médias
df_medias <- data.frame(amostras) |> mutate(media = medias)
head(df_medias)
tail(df_medias)
# Chunk 7
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df$x)
identical(med_amostral, med_pop)
ggplot(df_medias, aes(x = media)) +
geom_histogram(bins = 8, color = "black", fill = "gray") +
geom_vline(xintercept = med_pop, color = "red", size = 1)
# Chunk 8
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
individ <- amostras[id,]
mean(df[[var]][individ])
}
N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
# Chunk 9
sample_random(df, n = 3, strata = cromossomo)
# Chunk 10
sample_random(df,
prop = 0.3,
strata = cromossomo)
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1461701268")
df
# Função auxiliar
sample_random <- function(data, n, prop, strata = NULL){
if(!missing(strata)){
data <- data |> group_by({{strata}})
}
slice_sample(data, n = n, prop = prop)
}
N <- 10
n <- 3
d <- combn(N, n)
t(d)
N <- 10
df <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
df
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df$x)
identical(med_amostral, med_pop)
ggplot(df_medias, aes(x = media)) +
geom_histogram(bins = 8, color = "black", fill = "gray") +
geom_vline(xintercept = med_pop, color = "red", size = 1)
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
individ <- amostras[id,]
mean(df[[var]][individ])
}
N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
sample_random(df, n = 3, strata = cromossomo)
df
# Chunk 1
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1461701268")
df
# Chunk 2
# Função auxiliar
sample_random <- function(data, n, prop, strata = NULL){
if(!missing(strata)){
data <- data |> group_by({{strata}})
}
slice_sample(data, n = n, prop = prop)
}
# Chunk 3
N <- 10
n <- 3
d <- combn(N, n)
t(d)
N <- 10
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
df2
n <- 3
amostras <- combn(N, n) |> t()
amostras |> head()
amostras |> tail()
library(tidyverse)
medias <- NULL
# abordagem com for-loop
for (i in 1:nrow(amostras)) {
individ <- amostras[i,]
valores <- df$x[individ]
medias <- append(medias, mean(valores))
}
# criar um data frame com as médias
df_medias <- data.frame(amostras) |> mutate(media = medias)
head(df_medias)
tail(df_medias)
library(tidyverse)
medias <- NULL
# abordagem com for-loop
for (i in 1:nrow(amostras)) {
individ <- amostras[i,]
valores <- df2$x[individ]
medias <- append(medias, mean(valores))
}
# criar um data frame com as médias
df_medias <- data.frame(amostras) |> mutate(media = medias)
head(df_medias)
tail(df_medias)
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df$x)
identical(med_amostral, med_pop)
ggplot(df_medias, aes(x = media)) +
geom_histogram(bins = 8, color = "black", fill = "gray") +
geom_vline(xintercept = med_pop, color = "red", size = 1)
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df2$x)
identical(med_amostral, med_pop)
ggplot(df_medias, aes(x = media)) +
geom_histogram(bins = 8, color = "black", fill = "gray") +
geom_vline(xintercept = med_pop, color = "red", size = 1)
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
individ <- amostras[id,]
mean(df[[var]][individ])
}
N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
library(parallel)
clust <- makeCluster(5)
clusterExport(clust,
varlist = c("df", "amostras2", "get_mean"))
system.time(
medias3 <-
parLapply(clust, 1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
sample_random(df, n = 3, strata = cromossomo)
sample_random(df,
prop = 0.3,
strata = cromossomo)
sample_sist <- function(data, n, r = NULL){
k <- ceiling(nrow(df) / 4)
if(is.null(r)){
r <- sample(1:k, 1)
}
rows <- seq(r, r + k*(n-1), k)
slice(data, rows)
}
sample_sist(df, n = 4, r = 1)
sample_sist <- function(data, n, r = NULL){
k <- ceiling(nrow(data) / n)
if(is.null(r)){
r <- sample(1:k, 1)
}
rows <- seq(r, r + k*(n-1), k)
slice(data, rows)
}
sample_sist(df, n = 4, r = 1)
stopCluster(clust)
# Chunk 1
library(tidyverse)
library(rio)
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1461701268")
df
# Chunk 2
# Função auxiliar
sample_random <- function(data, n, prop, strata = NULL){
if(!missing(strata)){
data <- data |> group_by({{strata}})
}
slice_sample(data, n = n, prop = prop)
}
# Chunk 3
N <- 10
n <- 3
d <- combn(N, n)
t(d)
# Chunk 4
N <- 10
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
df2
# Chunk 5
n <- 3
amostras <- combn(N, n) |> t()
amostras |> head()
amostras |> tail()
# Chunk 6
library(tidyverse)
medias <- NULL
# abordagem com for-loop
for (i in 1:nrow(amostras)) {
individ <- amostras[i,]
valores <- df2$x[individ]
medias <- append(medias, mean(valores))
}
# criar um data frame com as médias
df_medias <- data.frame(amostras) |> mutate(media = medias)
head(df_medias)
tail(df_medias)
# Chunk 7
med_amostral <- mean(df_medias$media)
med_pop <-  mean(df2$x)
identical(med_amostral, med_pop)
ggplot(df_medias, aes(x = media)) +
geom_histogram(bins = 8, color = "black", fill = "gray") +
geom_vline(xintercept = med_pop, color = "red", size = 1)
# criando uma função para obter a média de um id
get_mean <- function(df, var, amostras, id){
individ <- amostras[id,]
mean(df[[var]][individ])
}
N <- 30
n <- 5
df2 <- data.frame(id = 1:N,
x = rnorm(n = N, mean = 10, sd = 2))
amostras2 <- combn(N, n) |> t()
system.time(
medias2 <-
sapply(1:nrow(amostras2), function(i){
get_mean(df, "x", amostras2, id = i)
})
)
sample_random(df, n = 3, strata = cromossomo)
1+1
