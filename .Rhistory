# sem interação
dfsi <- tribble(
~GEN, ~FONTEN, ~RG,
"Híbrido 1","Ureia",   5.7,
"Híbrido 1","Nitrato", 6.8,
"Híbrido 2","Ureia",   8.2,
"Híbrido 2","Nitrato", 9.3)
# Chunk 1
library(tidyverse)
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
# Chunk 2
sketch(trat= c("A1", "A2"),
trat1 = c("B1", "B2", "B3"),
design = "FAT2DIC",
r = 4)
# Chunk 3
sketch(trat= c("A1", "A2"),
trat1 = c("B1", "B2", "B3"),
design = "FAT2DBC",
r = 4)
# sem interação
dfsi <- tribble(
~GEN, ~FONTEN, ~RG,
"Híbrido 1","Ureia",   5.7,
"Híbrido 1","Nitrato", 6.8,
"Híbrido 2","Ureia",   8.2,
"Híbrido 2","Nitrato", 9.3)
modsi <- aov(RG ~ GEN*FONTEN, data = dfsi)
summary(modsi)
dfsi
# tabela dupla entrada
dfsi |>
make_mat(GEN, FONTEN, RG) |>
row_col_sum()
# tabela dupla entrada (totais)
dfsi |>
make_mat(GEN, FONTEN, RG) |>
row_col_mean()
# tabela dupla entrada (totais)
dfsi |>
make_mat(GEN, FONTEN, RG) |>
row_col_sum()
# tabela dupla entrada (totais)
dfsi |>
make_mat(GEN, FONTEN, RG) |>
row_col_mean()
modsi <- aov(RG ~ GEN * FONTEN, data = dfsi)
summary(modsi)
# tabela dupla entrada (totais)
dfsi |>
make_mat(GEN, FONTEN, RG) |>
row_col_mean()
mat_dfsi <- make_mat(GEN, FONTEN, RG)
mat_dfsi <- make_mat(dfsi, GEN, FONTEN, RG)
mat_dfsi
# tabela dupla entrada (totais)
mat_dfsi |>
row_col_sum()
# tabela dupla entrada (totais)
mat_dfsi |>
row_col_mean()
mat_dfsi
# soma de quadrados do fator GEN
rowSums(mat_dfsi)
rowSums(mat_dfsi) ^ 2
# interação simples
df_is <- tribble(
~GEN, ~FONTEN, ~RG,
"Híbrido 1","Ureia",   4.5,
"Híbrido 1","Nitrato", 1.9,
"Híbrido 2","Ureia",   11,
"Híbrido 2","Nitrato", 5.3)
p2 <-
plot_factbars(df_is, GEN, FONTEN, resp = RG,
ylab = expression(paste("RG (Mg ",ha^-1, ")")),
y.expand = 0.2,
size.text = 16,
errorbar = F,
values = TRUE,
xlab = "Híbrido",
legend.position = c(0.2, 0.89)) +
ggtitle("Interação simples")
p2
# interação complexa
df_ic <- tribble(
~GEN, ~FONTEN, ~RG,
"Híbrido 1","Ureia",   4.1,
"Híbrido 1","Nitrato", 1.4,
"Híbrido 2","Ureia",   6.2,
"Híbrido 2","Nitrato", 8.4)
p3 <-
plot_factbars(df_ic, GEN, FONTEN, resp = RG,
ylab = expression(paste("RG (Mg ",ha^-1, ")")),
y.expand = 0.2,
size.text = 16,
errorbar = F,
values = TRUE,
xlab = "Híbrido",
legend.position = c(0.2, 0.89)) +
ggtitle("Interação complexa")
p3
url <- "http://bit.ly/df_biostat_exp"
df_fat <-
import(url, sheet = "FAT1_CI2", setclass = "tbl") |>
as_factor(1:3)
plot_factbars(df_fat, NIT, ENX, resp = L)
plot_factbars(df_fat, ENX, NIT, resp = L)
inspect(df_fat, plot = TRUE)
df_fat
mat_df_fat <- make_mat(df_fat, NIT, ENX, L)
mat_df_fat
mat_df_fat <- make_mat(df_fat, ENX, NIT, L)
mat_df_fat
mat_df_fat
df_fat
# total dos blocos
tbloco <- sum_by(df_fat, REP) |> pull()
tbloco
sum_by(df_fat, REP)
# total dos blocos
tbloco <- sum_by(df_fat, REP) |> pull()
soma(mat_df_fat)
soma(mat_df_fat) ^ 2
sum_by(df_fat, REP) |> pull()
sum_by(df_fat, REP) |> pull()
I <- nlevels(df_fat$ENX)
I
J <- nlevels(df_fat$NIT)
K <- nlevels(df_fat$REP)
# fator de correção
C <- soma(mat_df_fat) ^ 2 / (I*J*K)
C
# fator de correção
C <- sum(mat_df_fat) ^ 2 / (I*J*K)
C
mat_df_fat
# fator de correção
C <- sum(mat_df_fat ^ 2)  / (I*J*K)
C
df_fat
sum(mat_df_fat)
# fator de correção
C <- sum(df_fat$L)  / (I*J*K)
C
sum(df_fat$L)
# fator de correção
C <- sum(df_fat$L) ^ 2  / (I*J*K)
C
mat_df_fat
rowSums(mat_df_fat)
# soma de quadrados de ENX
sqa <- rowSums(mat_df_fat) ^ 2 / J * K -  C
sqa
rowSums(mat_df_fat) ^ 2
(rowSums(mat_df_fat) ^ 2 / J * K) -  C
rowSums(mat_df_fat^ 2)
mat_df_fat
rowSums(mat_df_fat)
mat_df_fat
mat_df_fat <- make_mat(df_fat, ENX, NIT, L, fun = sum)
mat_df_fat
rowSums(mat_df_fat)
(rowSums(mat_df_fat)  / J * K) -  C
rowSums(mat_df_fat ^ 2)
rowSums(mat_df_fat) ^ 2
# soma de quadrados de ENX
sqa <- (sum(rowSums(mat_df_fat) ^ 2)  / J * K) -  C
sqa
sum(rowSums(mat_df_fat) ^ 2)
sum(rowSums(mat_df_fat) ^ 2)  / (J * K) -  C
colSums(mat_df_fat)
mat_df_fat
sum(colSums(mat_df_fat) ^ 2)  / (I * K) -  C
# soma de quadrados de NIT (b)
sqb <- sum(colSums(mat_df_fat) ^ 2)  / (I * K) -  C
sum(mat_df_fat ^ 2)
sum(mat_df_fat ^ 2)  / K -  C
sqab <- sum(mat_df_fat ^ 2)  / K -  C - sqa - sqb
sqab
# soma de quadrados da interação (a x b)
sqab <- (sum(mat_df_fat ^ 2)  / K )-  C - sqa - sqb
sqab
(sum(mat_df_fat ^ 2)  / K )
(sum(mat_df_fat ^ 2)  / K )-  C
sqa
mat_df_fat
sum(mat_df_fat ^ 2)
sum(mat_df_fat ^ 2  / K
sum(mat_df_fat ^ 2  / K
sum(mat_df_fat ^ 2)
sum(mat_df_fat ^ 2)  / K
# soma de quadrados da interação (a x b)
sqab <- sum(mat_df_fat ^ 2)  / K -  C - sqa - sqb
sqab
sqa
# soma de quadrados de ENX (a)
sqa <- sum(rowSums(mat_df_fat) ^ 2)  / (J * K) -  C
sqa
# soma de quadrados de ENX (a)
sqa <- sum(rowSums(mat_df_fat) ^ 2)  / (J * K) -  C
# soma de quadrados de NIT (b)
sqb <- sum(colSums(mat_df_fat) ^ 2)  / (I * K) -  C
# soma de quadrados da interação (a x b)
sqab <- sum(mat_df_fat ^ 2)  / K -  C - sqa - sqb
sqab
df_fat$L ^ 2
# fator de correção
C <- sum(df_fat$L) ^ 2  / (I*J*K)
# soma de quadrado total
sqtot <- sum(df_fat$L ^ 2) - C
sqtot
sqtot
sum(df_fat$L ^ 2) - C
sum(rowSums(mat_df_fat) ^ 2)  / (J * K) -  C
# soma de quadrado total
sqtot <- sum(df_fat$L ^ 2) - C
# soma de quadrados de ENX (a)
sqa <- sum(rowSums(mat_df_fat) ^ 2)  / (J * K) -  C
# soma de quadrados de NIT (b)
sqb <- sum(colSums(mat_df_fat) ^ 2)  / (I * K) -  C
# soma de quadrados da interação (a x b)
sqab <- sum(mat_df_fat ^ 2)  / K -  C - sqa - sqb
# soma de quadrado do erro
sqerr <- sqtot - sqa - sqb - sqab
sqerr
tbloco
# soma de quadrado de bloco
sqbloco <- (tbloco ^ 2) / I*J - C
sqbloco
# soma de quadrado de bloco
sqbloco <- sum((tbloco ^ 2)) / I*J - C
sqbloco
# soma de quadrado de bloco
sqbloco <- sum(tbloco ^ 2) / (I*J) - C
sqbloco
# soma de quadrado de bloco
sqbloco <- sum(tbloco ^ 2) / (I*J) - C
# soma de quadrado do erro
sqerr <- sqtot - sqa - sqb - sqab - sqbloco
sqerr
# montar a tabela
FV <- c("BLOCO", "ENX", "NIT", "ENX*NIT", "ERRO", "TOTAL")
I*J
(I*J - 1) * (K - 1)
GL <- c(3, 1, 2, 2, 15, 23)
SQ <- c(sqbloco, sqa, sqb, sqab, sqerr, sqtot)
GK <- SQ / GL
QM <- SQ / GL
# montar a tabela
FV <- c("BLOCO", "ENX", "NIT", "ENX*NIT", "ERRO", "TOTAL")
GL <- c(3, 1, 2, 2, 15, 23)
SQ <- c(sqbloco, sqa, sqb, sqab, sqerr, sqtot)
QM <- SQ / GL
QM
QM
FC <- QM / QM[5]
FC
FC[5:6] <- ""
FC
FC <- QM / QM[5]
FC <- QM / QM[5]
FC[5:6] <- NA
FC
data.frame(FV = FV, GL = GL, SQ = SQ, QM = QM, FC = FC)
# opção 1
anova <- aov(L ~ ENX*NIT + REP, data = df_fat)
# modelo idêntico, indicando os termos explicitamente
anova <- aov(L ~ ENX + NIT + ENX:NIT + REP, data = df_fat)
summary(anova)
var(df_fat$L)
# Chunk 1
library(tidyverse)
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
# Chunk 2
sketch(trat= c("A1", "A2"),
trat1 = c("B1", "B2", "B3"),
design = "FAT2DIC",
r = 4)
# Chunk 3
sketch(trat= c("A1", "A2"),
trat1 = c("B1", "B2", "B3"),
design = "FAT2DBC",
r = 4)
# sem interação
dfsi <- tribble(
~GEN, ~FONTEN, ~RG,
"Híbrido 1","Ureia",   5.7,
"Híbrido 1","Nitrato", 6.8,
"Híbrido 2","Ureia",   8.2,
"Híbrido 2","Nitrato", 9.3)
dfsi
make_mat(dfsi, GEN, FONTEN, RG)
make_mat(dfsi, GEN, FONTEN, RG) |> row_col_mean()
plot_factbars(dfsi, GEN, FONTEN, resp = RG,
ylab = expression(paste("RG (Mg ",ha^-1, ")")),
y.expand = 0.2,
size.text = 16,
values = TRUE,
errorbar = F,
xlab = "Híbrido",
legend.position = c(0.2, 0.89)) +
ggtitle("Ausência de interação")
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R")
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R") |>
addPopups()
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-48.505555555556,
lat=-27.582222222222,
popup="The birthplace of R")
1.5*1.2*16
altura <- c(245, 250, 269, 280, 262)
# Média
(media <- mean(altura))
# Mediana
# Ordenar os dados
sort(altura)
# Calcular a mediana
(mediana <- median(altura))
# Chunk 1
library(tidyverse)
library(metan)
altura <- c(245, 250, 269, 280, 262)
# Média
(media <- mean(altura))
# Mediana
# Ordenar os dados
sort(altura)
# Calcular a mediana
(mediana <- median(altura))
mean(altura)
library(metan)
hmean(c(80, 120))
