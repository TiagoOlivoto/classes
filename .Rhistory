# todas as linhas de df1 e df2
df1 |> inner_join(df2)
# todas as linhas de df1 ou df2
df1 |> full_join(df2, keep = TRUE)
View(df1)
View(df1)
inner_join
# todas as linhas de df1 e df2
df1 |> inner_join(df2)
inner_join(df1, df2)
View(df2)
df1 <- import("examples_data.xlsx", sheet = "df1")
View(df1)
# linhas de df1 que estão em df2
df1 |> semi_join(df2)
df1
df2
# linhas de df1 que NÃO estão em df2
df1 |> anti_join(df2)
(A <- letters[1:4])
(B <- letters[2:5])
(C <- letters[3:7])
(D <- letters[1:12])
set_lits <- list(A = A, B = B, C = C, D = D)
# intersecção de A, B (dplyr)
intersect(A, B)
# intersecção de A, B e C (dplyr)
intersect(intersect(A, B), C)
intersect
# intersecção de A, B (dplyr)
intersect(A, B)
# Intersecção de A e B
set_intersect(A, B)
# Intersecção de A, B e C
set_intersect(A, B, C)
set_union(set_lits)
venn_plot(set_lits, show_elements = TRUE)
venn_plot(set_lits, show_elements = TRUE)
venn_plot(set_lits, show_elements = TRUE)
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
View(maize)
# para evitar uma saída longa
df <- maize |> slice(1:5)
View(df)
# lista de nomes
df |> select(AMB, HIB, REP)
# sequência de nomes
df |> select(AMB:REP)
# vector de posições
df |> select(1:3)
# negar a seleção
df |> select(!c(AMB:REP))
# negar a seleção
df |> select(c(AMB:REP))
# negar a seleção
df |> select(!c(AMB:REP))
# seleciona variáveis numéricas
df |> select(where(is.numeric))
df |> select(where(~is.numeric))
df |> select(where(!is.numeric))
df |> select(where(~!is.numeric(.x)))
df |> select(!where(is.numeric))
df |> select(where(~!is.numeric(.x)))
df |> select(!where(is.numeric))
df |> select(!where(is.character()))
df |> select(!where(is.character))
df |> select(starts_with("C"))
df |> select(ends_with("S"))
# variáveis que começam com M e terminam com A
df |> select(starts_with("M") & ends_with("A"))
# variáveis que começam com M ou terminam com A
df |> select(starts_with("M") | ends_with("A"))
df |> select(contains("PLANT"))
df |> select(matches("^A[A-M]"))
df
vars <- c("TESTE", "CESP", "NGRA", "NAO_TEM")
df |> select(one_of(vars))
df
df |> select(everything())
ap <- df |> select(contains("APL"))
View(ap)
ap$APLA_PLANT
df$MGRA
# padrão é a última coluna
df |> pull()
View(df)
# selecionar variável com base no nome
df |> pull(MGRA)
# selecionar variável com base na sua posição
df |> pull(5)
# selecionar variável com base na sua posição
df |> pull(3)
df
df |> relocate(NGRA, .before = APLA_PLANT)
df |> relocate(contains("_PLANT"), .after = last_col())
df |> relocate(where(is.numeric), .before = where(is.character))
View(maize)
filter
maize %>%
filter(MGRA > 280)
maize %>%
filter(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820)
maize %>%
filter(MGRA > 220 & APLA_PLANT < 2)
df |>
filter(between(MGRA, 200, 300))
maize |> filter(HIB == "H1")
maize |> filter(HIB = "H1")
maize |> filter(HIB == "H1")
maize |> filter(HIB != "H1")
# seleciona somente os híbridos H1 e H2
maize |> filter(HIB  ==  c("H1", "H2"))
# seleciona somente os híbridos H1 e H2
maize |> filter(HIB  ==  c("H1", "H2"))
# seleciona somente os híbridos H1 e H2
maize |> filter(HIB  %in%  c("H1", "H2"))
# selciona as primeiras três linhas
maize |> slice(1:3)
# selciona as primeiras três linhas
maize |> slice(c(1, 3))
View(maize)
# cinco linhas aleatórias
maize |> slice_sample(n = 5)
# dois menores valores de MGRA
maize |> slice_min(n = 2, MGRA)
# maior valor de NGRA
maize |> slice_max(n = 1, NGRA)
# ordena as linhas com base na variável CESP (crescente)
maize |> arrange(CESP)
# ordena as linhas com base na variável CESP (decrescente)
maize |> arrange(desc(CESP))
# ordena as linhas com base na variável CESP (crescente)
maize |> arrange(CESP)
maize %>%
group_by(HIB) %>%
arrange(MGRA, .by_group = TRUE)
# seleciona linhas com NA
maize |> select_rows_na()
# remove linhas com NA
maize |> remove_rows_na()
# substitu NA por 0
maize |> replace_na()
maize
# substitui NA pela média da coluna (cuidado!!!)
maize |> replace_na(replacement = "colmean")
mod <- lm(PH ~ GEN + REP, data = data_g)
tukey_hsd(mod)
# substitui NA pela média da coluna (cuidado!!!)
maize |> replace_na(replacement = "colmean")
# dados
maize <-
import("examples_data.xlsx",
sheet = "maize",
setclass = "tbl")
# padrão: nova variável inserida na última posição
maize %>% mutate(CD = CESP/DIES)
# posição da nova variável
maize %>% mutate(CD = CESP/DIES,
.after = DIES)
# mantém somente as utilizadas no cálculo
maize %>% mutate(CD = CESP/DIES,
.keep = "used")
# mantém as não utilizadas
maize %>% mutate(CD = CESP/DIES,
.keep = "unused")
# mantém somente a variável criada
maize %>% mutate(CD = CESP/DIES,
.keep = "none")
transmute(maize, CD = CESP/DIES)
maize |>
group_by(HIB) |>
mutate(rank = rank(desc(MGRA)))
df <- tibble(x = 1:2, y = 3:4, z = 5:6)
df
# sem rowise()
df |> mutate(m = sum(c(x, y, z)))
# com rowise()
df |>
rowwise() |>
mutate(soma = sum(c(x, y, z)))
# mesmo resultado
# utilizando semântica tidyselect
df |>
rowwise() |>
mutate(soma = sum(c_across(x:z)))
df
df |> apply(1, sum)
# função para rescalar
rescale <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale
rescale(maize$CESP)
mutate_if(maize, is.numeric, rescale)
?mutate_if
# aplica a função rescale() para algumas colunas
maize %>% mutate(across(MGRA:NGRA, rescale))
# usando select helpers
# divide o valor da variável pela metade
# atribui um sufixo para as novas variáveis
# seleciona apenas as utilizadas
maize %>%
mutate(across(contains("_PLANT"), ~.x / 2,
.names = "{.col}_metade"),
.after = AIES_PLANT,
.keep = "used")
maize
maize %>%
mutate(
CASO = case_when(
MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820 ~  "Selecionar",
APLA_PLANT > 2.3 ~ "Alto",
MGRA < 130 ~ "Pouco produtivo",
TRUE ~ "Outro"
)
) |>
group_by(CASO) |>
slice_sample(n = 1)
ifelse
transform(maize,
CASO = ifelse(MGRA > 280 | APLA_PLANT < 1.3 | NGRA > 820, "Selecionar",
ifelse(APLA_PLANT > 2.3, "Alto",
ifelse(MGRA < 130, "Pouco produtivo",
"Outro"))))
maize |> count(NGRA, sort = TRUE)
maize |> count(NGRA)
maize |> count(NGRA, sort = TRUE)
maize |> distinct(NGRA)
maize %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n(),
cv = (MGRA_sd / MGRA_mean) * 100)
maize
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
maize %>%
group_by(HIB, AMB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
medias <-
maize %>%
group_by(HIB, AMB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
View(medias)
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
View(medias)
medias <-
maize %>%
group_by(HIB) %>%
mutate(HIB = as.factor(HIB))
medias <-
maize %>%
group_by(HIB) %>%
mutate(HIB = as.factor(HIB)) |>
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
View(medias)
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n()) |>
mutate(HIB = fct_relevel(HIB, paste0("H", 1:13)))
View(medias)
levels(medias$HIB)
ggplot(medias, aes(HIB, MGRA_mean)) +
geom_bar()
ggplot(medias, aes(HIB, MGRA_mean)) +
geom_col()
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n())
ggplot(medias, aes(HIB, MGRA_mean)) +
geom_col()
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n()) |>
mutate(HIB = as.factor(HIB, levels = paste0("H", 1:13)))
as.factor
?as.factor
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n()) |>
mutate(HIB = factor(HIB, levels = paste0("H", 1:13)))
factor
medias <-
maize %>%
group_by(HIB) %>%
summarise(MGRA_mean = mean(MGRA),
MGRA_sd = sd(MGRA),
n = n()) |>
mutate(HIB = factor(HIB, levels = paste0("H", 1:13)))
ggplot(medias, aes(HIB, MGRA_mean)) +
geom_col()
maize %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
se <- function(x){
return(sd(x, na.rm = TRUE) / sqrt(length(x)))
}
maize %>%
group_by(AMB) %>%
summarise(across(starts_with("M"), se, .names = "{.col}_se"))
maize %>%
group_by(AMB) %>%
summarise(across(where(is.numeric), se, .names = "{.col}_se"))
maize %>%
group_by(HIB) |>
summarise(across(starts_with("M"), list( mean, sd)))
maize %>%
group_by(HIB) |>
summarise(across(starts_with("M"), list(m = mean, sd = sd)))
my_quantile <- function(x, probs) {
tibble::tibble(x = quantile(x, probs), probs = probs)
}
maize %>%
group_by(HIB) %>%
summarise(my_quantile(MGRA, c(0.25, 0.75)))
mtcars %>%
group_by(cyl) %>%
summarise(my_quantile(disp, c(0.05, 0.25, 0.75, 0.975)))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric, my_quantile, c(0.25, 0.75))))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric), my_quantile, c(0.25, 0.75)))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric), my_quantile, c(0.25, 0.75), na.rm = TRUE))
quantile
my_quantile <- function(x, probs, na.rm) {
tibble::tibble(x = quantile(x, probs), probs = probs, na.rm = na.rm)
}
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric), my_quantile, c(0.25, 0.75), na.rm = TRUE))
my_quantile <- function(x, probs, na.rm) {
tibble::tibble(x = quantile(x, probs, na.rm = na.rm), probs = probs)
}
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric), my_quantile, c(0.25, 0.75), na.rm = TRUE))
my_quantile <- function(x, probs, na.rm) {
tibble::tibble(x = quantile(x, probs, na.rm = na.rm))
}
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric), my_quantile, c(0.25, 0.75), na.rm = TRUE))
?across
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
my_quantile,
c(0.25, 0.75)))
my_quantile <- function(x, probs, na.rm = TRUE) {
tibble::tibble(x = quantile(x, probs, na.rm = na.rm))
}
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
my_quantile,
c(0.25, 0.75)))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean),
c(0.25, 0.75)))
maize %>%
group_by(HIB) |>
summarise(across(starts_with("M"), list(m = mean, sd = sd)))
mean(maize$DIES)
mean(maize$NGRA)
mean(maize$NGRA, na.rm = TRUE)
my_quantile(maize$NGRA, na.rm = TRUE)
my_quantile(maize$NGRA, na.rm = TRUE, c(0.05, 0.95))
my_quantile(maize$NGRA, na.rm = TRUE, c(0.5))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean),
c(0.25, 0.75)))
my_quantile <- function(x, probs, na.rm = TRUE) {
tibble::tibble(x = quantile(x,  c(0.25, 0.75), na.rm = na.rm))
}
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean)))
d <-
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean)))
View(d)
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean),
na.rm = TRUE))
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean)))
d <-
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean)))
my_quantile <- function(x, probs, na.rm = TRUE) {
tibble::tibble(x = quantile(x,  probs, na.rm = na.rm))
}
d <-
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean),
list(na.rm = TRUE, probs = c(0.25, 0.75))))
d <-
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean),
list(probs = c(0.25, 0.75), na.rm = TRUE)))
my_quantile <- function(x, probs, na.rm = TRUE) {
tibble::tibble(x = quantile(x,  c(0.25, 0.75), na.rm = na.rm))
}
d <-
maize %>%
group_by(HIB) %>%
summarise(across(where(is.numeric),
list(q = my_quantile, m = mean)))
View(d)
desc_stat(maize)
maize |>
group_by(HIB) |>
desc_stat()
?desc_stat
d <-
maize |>
group_by(HIB) |>
desc_stat(stats = "all")
View(d)
install.packages(c("bookdown", "cli", "digest", "ggfortify", "ggpattern", "gmp", "htmltools", "jsonify", "Matrix", "modelr", "plyr", "R.utils", "RcppArmadillo", "recipes", "rgdal", "rmarkdown", "roxygen2", "rredlist", "sf", "spatstat", "spatstat.explore", "spatstat.linnet", "xfun", "yaml"))
1+1
getwd()
setwd("E:/Downloads")
setwd("E:/Downloads")
setwd("E:/Downloads/RGV410046")
getwd()
setwd("E:/Downloads/RGV410046")
1 + 1
1 + 1
1 + 1
setwd("E:/Downloads/RGV410046")
library(ggplot2)
library(patchwork)
# forma da distribuição
set.seed(100)
pop <- rweibull(2000, 1.5, 3)
hist(pop, nclass = 20)
hist(pop, nclass = 20)
# função para amostrar aleatoriamente 5 amostras
teor_lim <- function(n, pop){
data.frame(mean =
sapply(1:n, function(x){
mean(rweibull(2000, 1.5, 3))
}),
size = n)
}
# definir o número de amostragens
sizes <- c(10, 20, 30, 50, 200, 2000, 10000, 30000, 100000)
# criar a distribuição amostral
library(purrr)
dist_amo <- map_dfr(sizes, teor_lim, pop)
ggplot(dist_amo, aes(mean)) +
geom_histogram(bins = 50,
aes(y = ..density..)) +
geom_density(size = 1, color = "red") +
facet_wrap(~size, scales = "free")
ggplot(dist_amo, aes(mean)) +
geom_histogram(bins = 100,
aes(y = ..density..)) +
geom_density(size = 1, color = "red") +
facet_wrap(~size, scales = "free")
View(dist_amo)
