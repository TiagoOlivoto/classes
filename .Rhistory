#|
g1 <-
ggplot(df, aes(comp_grao, diam_grao)) +
geom_point()
# adiciona linhas horizontais e verticais
g2 <-
g1 +
geom_hline(yintercept = mean(df$diam_grao), color = "blue") +
geom_vline(xintercept = mean(df$comp_grao), color = "red")
arrange_ggplot(g1, g2,
ncol = 1,
tag_levels = list(c("g1", "g2")))
# Chunk 13
#| out-width: "100%"
#|
box1 <-
ggplot(df, aes(cor_grao, comp_grao)) +
geom_boxplot()
box2 <-
ggplot(df, aes(cor_grao, comp_grao)) +
geom_boxplot() +
geom_jitter(width = 0.1, color = "salmon")
box3 <-
ggplot(df, aes(cor_grao, comp_grao, fill = cor_grao)) +
geom_boxplot(width = 0.3) +
labs(x = "Grupo",
y = "Comprimento do grão (mm)") +
theme(legend.position = "bottom") +
scale_fill_manual(values = c("green", "red", "blue"))
arrange_ggplot((box1 + box2) / box3,
tag_levels = list(c("b1", "b2", "b3")))
# Chunk 14
#| out-width: "100%"
#|
h1 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_histogram()
h2 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_histogram(color = "black",
fill = "skyblue") +
facet_wrap(~m) +
labs(x = "Temperatura mínima",
y = "Horas")
arrange_ggplot(h1, h2,
widths = c(1, 1.4),
tag_levels = list(c("h1", "h2")))
# Chunk 15
#| out-width: "100%"
#|
d1 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density()
d2 <-
ggplot(df_estacao, aes(x = tmed)) +
geom_density(color = "black",
fill = "skyblue") +
facet_wrap(~m, ncol = 5) +
labs(x = "Temperatura média (ºC)",
y = "Densidade")
d3 <-
ggplot(df_estacao, aes(x = tmed, y = m, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c() +
labs(x = "Temperatura média (ºC)",
y = "Meses do ano",
fill = "Temperatura\nmédia (ºC)")
# agrupa os gráficos
arrange_ggplot((d1 + d2) / d3,
tag_levels = list(c("d1", "d2", "d3")))
# Chunk 16
clima_max_min <-
df_estacao %>%
group_by(dia) %>%
summarise(max = max(tmax),
min = min(tmin),
mean = mean(tmed),
precip = sum(prec)) %>%
pivot_longer(-dia)
clima_max_min
# Chunk 17
#| out-width: "100%"
# realiza um subset para remover a precipitação
df_temp <-
clima_max_min |>
subset(name != "precip")
# faz o gráfico de linhas
ggplot(df_temp, aes(dia, value, color = name)) +
geom_point() +
geom_line() +
scale_color_manual(values = c("red", "green", "blue"),
labels = c("Temperatura máxima (ºC)",
"Temperatura média (ºC)",
"Temperatura mínima (ºC)"),
guide = "legend") +
scale_x_date(date_breaks = "3 week", # marcação a cada duas semanas
date_labels = "%d/%m/%y") + # formato dd/mm/aa
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Temperaturas máximas, médias e mínimas em 2022",
subtitle = "Estação - Fazenda Ressacada",
caption = "Elaboração: Prof. Olivoto",
x = "Dia do ano",
y = "Temperatura (ºC)",
color = NULL) # remove o título da legenda
# Chunk 18
#| out-width: "100%"
bar1 <-
ggplot(df, aes(x = cor_grao, y = comp_grao)) +
geom_bar(stat = "summary", fun = "mean")
bar2 <-
ggplot(df, aes(x = cor_grao, y = comp_grao, fill = cor_grao)) +
stat_summary(fun = mean,
geom = "bar",
col = "black",
width = 0.8,
position = position_dodge(0.8)) +
stat_summary(fun.data = mean_se,
geom = "errorbar",
width = 0.2,
position = position_dodge(0.8))
arrange_ggplot(bar1, bar2,
widths = c(0.6, 1.2),
tag_levels = list(c("bar1", "bar2")))
# Chunk 19
#| out-width: "100%"
l1 <-
ggplot(df, aes(x = comp_grao, y = diam_grao)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # estima uma regressão linear
labs(x = "Comprimento do grão",
y = "Diâmetro do grão")
l2 <-
ggplot(df, aes(x = comp_grao, y = diam_grao, color = cor_grao)) +
geom_point() +
geom_smooth(method = "lm", se = F)+
labs(x = "Comprimento do grão",
y = "Diâmetro do grão")
arrange_ggplot(l1, l2,
tag_levels = list(c("s1", "s2")),
widths = c(1, 1.2))
# Chunk 20
#| out-width: "100%"
#### Polinômio de segundo grau
dado_reg <- tibble(dose = c(15,20,25,30,35,40),
prod = c(65,70,73,75,69,62))
q1 <-
ggplot(dado_reg, aes(dose, prod))+
geom_point()+
stat_smooth(method = "lm",
formula = "y ~ poly(x, 1)",
se = FALSE)
q2 <-
q1 +
stat_smooth(method = "lm",
formula = "y ~ poly(x, 2)",
linetype = "dashed",
color = "red",
se = FALSE)
arrange_ggplot(q1, q2, tag_levels = list(c("l1", "l2")))
# Chunk 21
#| out-width: "100%"
plot_lines(dado_reg,
x = dose,
y = prod,
fit = 2)
# Chunk 22
#| out-width: "100%"
plot_intro(df_estacao)
# Colunas numéricas
plot_histogram(df_estacao, ncol = 5)
# Chunk 23
#| out-width: "100%"
df_prec <-
clima_max_min |>
pivot_wider(names_from = "name",
values_from = "value")
ggplot() +
geom_bar(df_prec,
mapping = aes(x = dia, y = precip * 30 / 100),
stat = "identity",
fill = "skyblue") +
geom_line(df_prec,
mapping = aes(x = dia, y = max, colour = "red"),
size = 1) +
geom_line(df_prec,
mapping = aes(x = dia, y = min, colour = "blue"),
size = 1) +
scale_x_date(date_breaks = "15 days", date_labels =  "%d/%m",
expand = expansion(c(0, 0)))+
scale_y_continuous(name = expression("Temperatura ("~degree~"C)"),
sec.axis = sec_axis(~ . * 100 / 30 , name = "Precipitação (mm)")) +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_color_identity(breaks = c("red", "blue"),
labels = c("Temperatura máxima (ºC)",
"Temperatura mínima (ºC)"),
guide = "legend") +
labs(x = "Dia do ano")
# Chunk 24
#| out-width: "100%"
vento_long <-
df_estacao %>%
select(m, hora, velvent) %>%
pivot_longer(-c(m, hora))
head(vento_long)
# confeccionar gráfico
ggplot(vento_long, aes(m, value, color = name, group = name )) +
stat_summary(geom = "point",
fun = mean) +
stat_summary(geom = "line") +
stat_summary(geom = "errorbar", width = 0.1) +
scale_color_manual(values = c("red", "blue"),
labels = c("Rajada (m/s)",
"Velocidade do vento (m/s)"),
guide = "legend") +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12)) +
labs(title = "Velocidade média mensal do vento em 2022",
subtitle = "Estação UFSC - Ressacada",
caption = "Elaboração: Prof. Tiago Olivoto",
x = "Mês do ano",
y = "Velocidade (m/s)")
# Chunk 25
#| out-width: "100%"
# cria uma tabela de frequência transformando a variável quantitativa direção do vento
# em uma qualitativa
freq <-
cut(df_estacao$dirvent, breaks = seq(0, 360, by = 45)) |>
table() |>
as.data.frame() %>%
set_names("Direção", "Dias") %>%
mutate(Direção = paste0(seq(0, 315, by = 45)),
Percent = Dias / 3428 * 100) %>%
remove_cols(Dias)
freq
# criar um radar plot para mostrar a direção predominante
# do vento
ggradar(freq %>% transpose_df(),
values.radar = c("0%",  "25.8%"),
grid.max = max(freq$Percent))
# Chunk 26
#| out-width: "100%"
# américa do sul
library(rnaturalearth)
library(tidyverse)
sam <-
ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
p1 <-
ggplot() +
geom_sf(data = sam, fill = "white") +
theme_light() +
xlim(c(-90, -35))
# plotar o brasil e destacar santa catarina
brazil <-
ne_states(country = "brazil", returnclass = "sf") |>
mutate(scat = ifelse(postal == "SC", "SC", "Outros"))
p2 <-
p1 +
geom_sf(data = brazil, aes(fill = scat))
p2
# Chunk 27
#| out-width: "100%"
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE,
showProgress = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
p3 <-
p1 +
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
p3
# Chunk 29
library(rio)
library(tidyverse)
library(metan)
url <- "https://raw.githubusercontent.com/TiagoOlivoto/classes/refs/heads/master/FIT5306/data/alface.csv"
df <- rio::import(url)
# Chunk 30
p1 <-
ggplot(df, aes(AF, MST)) +
geom_point()
# Chunk 31
p2 <-
ggplot(df, aes(AF, MST, color = DAP)) +
geom_point() +
labs(x = "Área foliar (cm2)",
y = "Matéria seca (g)")
# Chunk 32
#| out-width: "100%"
arrange_ggplot(p1, p2)
# Chunk 34
p3 <-
ggplot(df, aes(DAP, MST)) +
geom_boxplot()
# Chunk 35
p4 <-
ggplot(df, aes(DAP, MST, fill = SOM)) +
geom_boxplot() +
geom_hline(yintercept = mean(df$MST))
# Chunk 36
#| out-width: "100%"
arrange_ggplot(p3, p4)
# Chunk 38
p5 <-
plot_bars(df,
x = DAP,
y = AF,
y.lim = c(0, 6000))
# versão ggplot2
p5.2 <-
ggplot(df, aes(DAP, AF)) +
geom_bar(stat = "summary") +
ylim(c(0, 6000))
# Chunk 39
p6 <-
plot_factbars(df, DAP, SOM,
resp = AF,
y.lim = c(0, 6000),
xlab = "Dias após o plantio (DAP)",
ylab = "Área foliar (cm2)")
# versão ggplot2
p6.2 <-
ggplot(df, aes(DAP, AF, fill = SOM)) +
geom_bar(stat = "summary",
fun = "mean",
width = 0.7,
position = position_dodge()) +
stat_summary(fun.data = mean_se,
geom = "errorbar",
width = 0.2,
position = position_dodge( width = 0.7)) +
labs(x = "Dias após o plantio (DAP)",
y = "Área foliar (cm2)") +
ylim(c(0, 6000))
# Chunk 40
#| out-width: "100%"
arrange_ggplot(p5, p6)
df <-
data.frame(
unique_id = pliman::uuid(52),
aluno = paste0("A", 1:52),
)
df <-
data.frame(
unique_id = pliman::uuid(52),
aluno = paste0("A", 1:52)
)
df
df |>
export("coleta_bio.xlsx")
df |>
export("coleta_bio.csv")
df <-
data.frame(
unique_id = pliman::uuid(52),
id = 1:52,
aluno = paste0("A", 1:52)
)
df |>
export("coleta_bio.csv")
df <-
data.frame(
unique_id = pliman::uuid(52),
nome = 1:52,
aluno = paste0("A", 1:52)
)
df <-
data.frame(
unique_id = pliman::uuid(52),
nome = 1:52,
aluno = paste0("A", 1:52)
) |>
export("coleta_bio.csv")
install.packages("ExpDes.pt")
library(ggstatsplot)
ggbetweenstats(dados,
x = grupo,
y = valor,
plot.type = "box",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
ylab = "rendimento",
k = 0)
df <-
data.frame(
unique_id = pliman::uuid(52),
nome = 1:52,
aluno = paste0("A", 1:52)
)
View(df)
FielDHub::run_app()
library(pliman)
set_wd_here()
library(rio)
import("coleta_bio_table.csv")
df <- import("coleta_bio_table.csv")
export(df, "coleta_bio_table.xlsx")
pliman::shapefile_input("shape.rds")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(52))
library(tidyverse)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(52))
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70))
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
export("eucalipto.csv")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
export("eucalipto.csv")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame()
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
export("eucalipto.csv")
a <- pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry()
View(a)
class(a)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry) |>
export("eucalipto.csv")
View(a)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry) |>
select(unique_id:individuo) |>
export("eucalipto.csv")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry) |>
select(unique_id:individuo) |>
export("eucalipto.csv")
View(a)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry) |>
select(unique_id) |>
export("eucalipto.csv")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry) |>
select(unique_id) |>
export("eucalipto.csv")
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry)
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry)
library(rio)
set_wd_here()
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry)
pliman::shapefile_input("shape.rds")
set_wd_here()
pliman::shapefile_input("shape.rds") |>
mutate(unique_id = pliman::uuid(70)) |>
as.data.frame() |>
sf::st_drop_geometry() |>
select(-geometry)
View(a)
a |> select(unique_id:column)
a |> select(unique_id:column) |> export("eucalipto.csv")
View(a)
a |> select(unique_id:column) |> arrange(row, column) |>  export("eucalipto.csv")
