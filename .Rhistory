correlacao <- corr_coef(df)
plot(correlacao)
correlacao <- corr_coef(df, H1_A1:MVE_A2)
plot(correlacao)
corr_plot(df, H1_A1:MVE_A2)
corr_plot(df, H1_A1:MVE_A2)
View(df)
df[[1, 8]]
df[[, 8]]
df[[ 8]]
df[[1,8]] <- 2427.2
corr_plot(df, H1_A1:MVE_A2)
find_outliers(df, H1_A2)
find_outliers(df, H1_A2, plots = TRUE)
find_outliers(df, MVT_A1, plots = TRUE)
df <- import("CADERNO DE CAMPO.xlsx")
corr_plot(df, H1_A1:MVE_A2)
df <- import("CADERNO DE CAMPO.xlsx")
corr_plot(df, H1_A1:MVE_A2)
#| code-fold: true
#| out-width: "100%"
df_t <- tibble(
dist = "t",
n = seq(2, 30, length.out = 200),
media = 10,
desvpad = 2,
UL = media + get_ci_t(media, desvpad, n = n),
LL = media - get_ci_t(media, desvpad, n = n)
)
library(metan)
g <- g_simula(6, 4)
g
mod <- aov(V1 ~ GEN + REP, data = g)
tidyr::tidy(mod)
tidyr::tidy(anova(mod))
tidyr::tidy(mod)
broom::tidy(mod)
broom::tidy(mod) |> clipr::write_clip()
df <- clipr::read_clip()
?clipr::read_clip
df <- clip_read(sep)
df <- clip_read(sep)
df <- clip_read()
View(df)
library(tidyverse)
df |>
pivot_longer(-DOSE)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = .)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _)
df |>
pivot_longer(-DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df <- clip_read()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
df <- clip_read()
df |>
pivot_longer(-DOSE) |>
metan::as_factor(DOSE) |>
aov(value ~ DOSE + name, data = _) |>
broom::tidy()
g <- g_simula(6, 4)
g
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod) |> clipr::write_clip()
mod <- aov(V1 ~ GEN + REP, data = g)
broom::tidy(mod)
library(AgroR)
g <- g_simula(4, 4)
g
with(g,
DBC(GEN, REP, VI))
with(g,
DBC(GEN, REP, V1))
setwd("E:/Desktop/UFSC/aulas/classes/RGV410046/data")
library(rio)
df <- import("data.xlsx")
View(df)
View(df)
df <- import("data.xlsx", sheet = "df_messy")
View(df)
str(df)
as.numeric(df$MMG)
metan::find_text_in_num(df$MMG)
setwd("E:/Desktop/UFSC/aulas/classes")
View(df)
apply(df, 2, class)
View(df)
table(df, GEN)
table(df$GEN)
table(df$env)
table(df$Gen)
metan::inspect(df)
View(df)
library(tidyverse)
pivot_longer(everything())
pivot_longer(df, everything())
pivot_longer(df, COMPRES)
pivot_longer(df, COMPES)
pivot_longer(df, -c(env:BLOCO))
View(df)
library(metan)
tidy_colnames(df)
desc_stat(df)
summarise(df, across(where(is.numeric, mean)))
summarise(df, across(where(is.numeric), mean))
summarise(df, across(where(!is.numeric), mean))
summarise(df, across(where(is.numeric), list(m = mean, sd = sd)))
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
View(df_biostat)
mtcars
mtcars %>%
lm(hp ~wt + am, data = .)
mtcars |>
lm(hp ~wt + am, data = _)
View(df)
url
View(df)
df <- import("data.xlsx")
df <- import("data/data.xlsx")
getwd()
df <- import("RGV410046/data/data.xlsx")
df |> select(GEN, BLOCO, ALT_PLANT)
df |> select(GEN, BLOCO, ALT_PLANT) |> pivot_wider(names_from = BLOCO, values_from = ALT_PLANT)
df |> select(GEN, BLOCO, ALT_PLANT) |> pivot_wider(names_from = BLOCO, values_from = ALT_PLANT) |> clipr::write_clip()
rbind(1,2,3,4,5)
rbind(c(1,6),c(2,7),c(3,8),c(4,9),c(5,10))
library(AgroR)
library(metan)
df <- clip_read()
View(df)
with(df, DBC(ADUBACAO, BLOCO, MST))
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
View(df)
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
df
df <- clip_read()
with(df, DBC(ADUBACAO, BLOCO, MST))
library(rio)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1216373680"
# função para importar os dados
df <- import(link)
url <- "https://bit.ly/df_biostat"
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
# Chunk 1
library(tidyverse)  # manipulação de dados
library(metan)      # estatísticas descritivas
library(rio)        # importação/exportação de dados
library(emmeans)    # comparação de médias
library(AgroR)      # casualização e ANOVA
library(ggstatsplot)# Gráficos com inferência estatística
url <- "https://bit.ly/df_biostat"
df_biostat <- import(url, sheet = "DIC-DBC")
glimpse(df_biostat)
install.packages("geobr")
library(tidyverse)
library(metan)
library(rio)
library(ggridges)
library(rnaturalearth)
library(ggradar)
library(lubridate)
library(geobr)
# américa do sul
library(rnaturalearth)
library(tidyverse)
sam <-
ne_countries(continent = "south america",
returnclass = "sf",
scale = 50)
p1 <-
ggplot() +
geom_sf(data = sam, fill = "white") +
theme_light() +
xlim(c(-90, -35))
# plotar o brasil e destacar santa catarina
brazil <-
ne_states(country = "brazil", returnclass = "sf") |>
mutate(scat = ifelse(postal == "SC", "SC", "Outros"))
p2 <-
p1 +
geom_sf(data = brazil, aes(fill = scat))
p2
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE,
showProgress = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
read_municipality(code_muni = "SC",
simplified = FALSE)
read_municipality(code_muni = "SC",
simplified = FALSE)
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
p3 <-
p1 +
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
p3
p1
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
ggplot()
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25))
sc <-
read_municipality(code_muni = "SC",
simplified = FALSE,
showProgress = FALSE) |>
mutate(floripa = ifelse(name_muni == "Florianópolis",
"Florianópolis",
"Outro"))
p3 <-
p1 +
geom_sf(data = brazil) +
geom_sf(data = sc, aes(fill = floripa)) +
xlim(c(-55, -47)) +
ylim(c(-30, -25)) +
labs(title = "Mapa do brasil destacando o estado de SC",
caption = "Produzido com os pkgs geobr e rnaturalearth",
fill = "") +
theme(legend.position = "bottom")
p3
900/150
960/6
ind <-
image_index(sev,
index = "B",
show_image = FALSE)
# Chunk 1
source("config/custom_css.R")
library(pliman)
img <- image_pliman("sev_leaf.jpg")
dim(img)
pixels <- img@.Data[1:2, 1:2, 1:3]
pixels
library(rio)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=0"
# função para importar os dados
df <- import(link)
View(df)
View(df)
# função para importar os dados
df <- import(link, dec = ",")
View(df)
# função para importar os dados
df <- import(link, dec = ",")
# função para importar os dados
df <- import(link)
View(df)
# função para importar os dados
df <- import(link, dec = ",")
# função para importar os dados
df <- import(link, dec = ",", fill = TRUE)
View(df)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=1992839231"
# função para importar os dados
df <- import(link, dec = ",", fill = TRUE)
View(df)
# função para importar os dados
df <- import(link, dec = ",")
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=1992839231"
# função para importar os dados
df <- import(link, dec = ",", fill = TRUE)
# função para importar os dados
df <- import(link, dec = ",")
# função para importar os dados
df <- import(link, dec = ",", fill = TRUE)
View(df)
# função para importar os dados
df <- import(link, dec = ",")
View(df)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=0"
# função para importar os dados
df <- import(link, dec = ",")
# estrutura dos dados
str(df)
# primeiras linhas
head(df)
stats = c("mean, median, range, ave.dev, var.amo, sd.amo, cv, se, n")
df |>
group_by(ramo) |>
desc_stat(stats = stats)
# Chunk 1
library(tidyverse)
library(metan)
# Chunk 2
altura <- c(245, 250, 269, 280, 262)
mean(altura)
# Chunk 3
library(metan)
hmean(c(80, 120))
# Chunk 4
altura <- c(245, 250, 269, 280, 262)
# Média
(media <- mean(altura))
# Mediana
# Ordenar os dados
sort(altura)
# Calcular a mediana
(mediana <- median(altura))
# Chunk 5
(extremos <- range(altura))
(amplitude <- extremos[2] - extremos[1])
# Chunk 6
(desvios <- altura - media)
# Chunk 7
df <- data.frame(pessoa = paste("Planta", 1:5),
altura = altura,
altura_media = media,
desvio = desvios)
ggplot(df, aes(x = altura, y = pessoa)) +
geom_point(color = "blue",
size = 3) +
geom_segment(aes(x = media,
xend = altura,
y = pessoa,
yend = pessoa)) +
geom_vline(xintercept = media, linetype = 2, color = "red") +
geom_text(aes(x = altura, y = pessoa, label = round(desvio, digits = 3),
hjust = ifelse(desvio < 0, 1.5, -0.5))) +
scale_x_continuous(limits = c(230, 300)) +
theme(panel.grid.minor = element_blank()) +
labs(x = "Altura da planta (cm)",
y = "Planta")
# Chunk 8
sum(desvios) |> round()
# Chunk 9
# soma dos desvios em módulo
(somadesv <- desvios |> abs() |> sum())
# desvio médio
somadesv / 5
# Chunk 10
# Desvios ao quadrado
(desvq <- desvios ^ 2)
# soma dos desvios ao quadrado
(somadesvq <- sum(desvq))
# divisão por n - 1
(var_altura <- somadesvq / 4)
# Chunk 11
var(altura)
# Chunk 12
(desv_altura <- sqrt(var_altura))
# utilizando a função sd()
sd(altura)
# Chunk 13
(altura_m <- altura / 100)
(desv_altura_m <- sd(altura_m))
# Chunk 14
# coeficiente de variação da variável em centímetros
(cv_altura <- desv_altura / media * 100)
# coeficiente de variação da variável em metros
(cv_altura2 <- desv_altura_m / mean(altura_m) * 100)
# Chunk 15
CV <- function(dados){
if(!class(dados) == "numeric"){
stop("Os dados precisam ser numéricos")
} #Indica que os dados devem ser numéricos
media <- mean(dados)
sd <- sd(dados)
CV <- (sd/media) * 100
return(CV) # Valor que será retornado pela função
}
CV(altura)
# Chunk 16
(epm <- desv_altura / sqrt(5))
# Chunk 17
library(metan)
desc_stat(altura, stats = "all") |> as.data.frame()
# estatísticas vistas neste material
desc_stat(altura,
stats = c("mean, median, range, ave.dev, var.amo, sd.amo, cv, se")) |>
as.data.frame()
# Chunk 18
library(rio)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=0"
# função para importar os dados
df <- import(link, dec = ",")
# estrutura dos dados
str(df)
# primeiras linhas
head(df)
stats = c("mean, median, range, ave.dev, var.amo, sd.amo, cv, se, n")
df |>
group_by(ramo) |>
desc_stat(stats = stats)
df |>
desc_stat(stats = stats)
# link dos dados
link <- "https://docs.google.com/spreadsheets/d/18aXD_2ISvzB8h8_kgOfSBbr9a9d9pT0QVazt-KjVLRw/edit#gid=0"
# função para importar os dados
df <- import(link, dec = ",")
View(df)
# função para importar os dados
df <- import(link, dec = ",") |> as_character(1:2)
View(df)
df |>
desc_stat(stats = stats)
df |>
group_by(Grupo, Coloracao) |>
desc_stat(stats = stats)
df |>
group_by(ramo) |>
desc_stat(stats = stats)
altura
# estatísticas vistas neste material
desc_stat(altura,
stats = c("mean, median, range, ave.dev, var.amo, sd.amo, cv, se")) |>
as.data.frame()
ggbetweenstats(df,
x = ramo,
y = comprimento,
plot.type = "box",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
ylab = "rendimento",
k = 0)
library(ggstatsplot)
ggbetweenstats(df,
x = ramo,
y = comprimento,
plot.type = "box",
pairwise.comparisons = FALSE,
results.subtitle = FALSE,
ylab = "rendimento",
k = 0)
ggbetweenstats(df,
x = ramo,
y = comprimento,
plot.type = "box",
# pairwise.comparisons = FALSE,
# results.subtitle = FALSE,
ylab = "rendimento",
k = 0)
5e-1
df |>
group_by(ramo) |>
desc_stat(stats = stats)
ggbetweenstats(df,
x = ramo,
y = comprimento,
plot.type = "box",
# pairwise.comparisons = FALSE,
# results.subtitle = FALSE,
ylab = "rendimento",
k = 3)
ggbetweenstats(df,
x = ramo,
y = comprimento,
plot.type = "box",
ylab = "rendimento")
